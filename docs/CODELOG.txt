Next
Bug fixes:

PLAN:
Goals:
- UI2: 
    better book page icons
    button templates & menus

- can create interesting books and templates
  interesting features: colored books, backgrounds, text, rotation
- background jobs - realistic api: image resizing after upload, pdf generation in background
- implement google/fb logins
- deploy
- < 200MB pdf files?

July 15
iPhoto style default images
new cursors, and maybe consistent positioning of tools.
image frame resize?
image metadata: sort date/rating/as-if, default text
split image upload into 2 parts to prevent saving of pages pointing to local images (create/upload) July 21
multiple editors?/
Deployment, multi-login, imports: august
I wish I had a better Javascript test harness. Should I spend a few days developing one?
Might be worth it, part of my book testbook? Once I have the themed javascript loading, I could
create a test harness.

Next:
Printing of text: hide default text
Pages assets:
pages:
commands: add/delete
default set of templates
switching page/book layouts (template matching), use nokogiri for it
page display: thumbnails, facing pages, etc.
hash bangs for pages
- assets css/js that comes with the book
- assets css/js that comes with the page
migrating albums: use nokogiri for html manipulation

week of Sept 26

templates listing
listing of all assets of a particular template
update html icons when page is updated
create a nice sample template: multiple images, images for whole page, frames

Sept 29
integrate with UploadImages
 - show progress for image uploads
 - test xhr errors
integrate with "Leaving page dialog"
integrate with UploadPages
give pages chance to upload every minute on a timer
unify pageUploadQueue and imageQueue into objectUploadQueue

Sept 28
Making progress on the new UploadQueue.
Anders got me up at 5, Ollie was doing badly at school, only late night hacking worked
Implemented real tests for UploadQueue
Will simplify lots of code
uploadQueue should filter out duplicate requests (or shuffle them to the end?) - create a test page for this?

Sept 23
generate ids when BookPage is created - what elements need and id?
convert guaranteeId to not create ids
use html icons to display pages


Sept 22
Further rake tasks
generate icon html
resize asset images
image count
assets small size serving
return html icons with page json

Sept 21
Pages coming along. Working on rake tasts to generate icons


Sept 15
Upgraded jquery
Architected "ID problem"
Refactoring of code to remove ID usage

Sep 13
No dojo: read the book. I did not like the feel of the project. More enterprise, less modern than jquery
Using qunit instead

Sep 8
Dojo work
http://dojotoolkit.org/reference-guide/util/doh.html
http://www.sitepen.com/blog/2008/04/15/unit-testing-custom-code-with-the-dojo-objective-harness/
http://www.sitepen.com/blog/2010/11/15/from-jquery-to-large-applications/
http://blog.rebeccamurphey.com/2009/11/12/dojo-confessions-or-how-i-gave-up-my-jquery-security-blanket-and-lived-to-tell-the-tale

Sept 7
Redid my testing code, now works
Page ordering: added new db field
Implemented some js, and decided that I want a js unit testing framework.
Dojo seems most mature.
Ideally, I'd load tests, and load dojo from CDN

Sept 1
/assets/:template_name/:asset_file implemented
simplified error handling on book initialization
decided not to do offline right now

June 30
Text done. Looks off, but functional
Reworked manipulators. Now they are only shown on mouseover.

June 28
Back from Sayulita, feeling happy

June 17
Undo/redo of text edits
Happy, Happy Text edit paste of facebook comments works!
Text is just a div. It has template text "Type here", which changes when type. Type here is not printed.
Tools: click to edit, click outside to complete. Edit mode highlights with a nice round border

June 16
Crappy day, got little work done. Starting work on contentEditable. Implementing
contentEditable is trickier than I thought.
Added VisualEvent debugger tool.
Got FF contentEditable to respond to first click. It responds to click event, broadcast

Jun 14
border-image is unusable because of gaps upon transform in Firefox and Webkit
https://bugzilla.mozilla.org/show_bug.cgi?id=455308, filed one for Webkit too

Jun 13
Experimenting with border-image. We've got a few problems:
- importing hi-res versions of the photo. Css needs to change. Books should have css associated
- 

Jun 10
Image placement hints done, with a beautiful test page in our new test book.
Implemented test book
Implemented yml properties for initial book layout

Jun 9
Bug fixing manipulators.
Zoom works

Jun 8
undo works accross pages
constraints on everything but zoom

Jun 7
exposed unmatrix method from transform.js to decompose transformation matrix
Firefox bug: getClientBoundingRect does not take transform into account. 
This issue is still being discussed in W3C, I'll work around for now.
Redid the button interaction: click now starts a mode
fix rotate/pan when image is rotated
shift constraint for rotate

Jun 6
Reimplemented innerHtml. We need styles to be saved in canonical webkit style, and restored
upon loading into browser.
Undo/redo bug fixing
Image commands are in demo stage. Need buggixg.

Jun 3
Reimplement innerHtml. The trigger for this was FF not saving style.transform.
The alternative was parsing and cleaning up innerHtml output.
It is always good to own the 'core competency' code.
http://www.whatwg.org/specs/web-apps/current-work/multipage/the-end.html#html-fragment-serialization-algorithm

Jun 2
- implemented pan/move/zoom/rotate
Solved a bunch of problems: Javascript default prototype inheritance is a pain,
used jresig library instead. His library uses arguments.callee, which are not allowed
in strict mode. I am still trying to wrap my brain around what that code does.
Workaround: disable strict mode in editor.js
- command framework, undo/redo


Jun 1:
Testbed for image manipulation. Implemented all operations without constraints
Could not implement image rotation about image center. There is no way to find image center
in page coordinates once it has been transformed.

May 31:
PDFs are generated with the correct size. Using inches is useless, as
they map to 96px. PDF generates 72px/in.

May 27
Movie with Mike

May 26
svg rip out complete, pdfs are generated
remaining problem is that pdfs are enlarged by 25%, need to make them WYSIWYG

May 25
wkpdf: forked, compiled, fixed some bugs, sent my 1st github pull request
Rip out SVG stuff

May 24
- photo dragging in chrome
- button bars: created simplest buttons
text tools:
I ran into trouble here: svg does not wrap text,
and faking text wrap makes me jump through hoops, measuring
character position with moveable spans
Time to rethink SVG. The format is badly supported,
badly designed. Little bugs popping up everywhere you look.
Inkscape is not something you want to base a business on.
HTML->PDF is still problematic. There is a new converter,
wkpdf, which shows promise. Clean, and OS X only for now.
Tested images, JPEGs are embedded fully.

May 23
remove resizing artifacts of SVG element
svg.cloneNode(true)
instead of parsing HTML, deep clone the node, and use DOM operations to clean up
Center the page horizontally/vertically, and give it a shadow
gray background on main-container
 
May 20
SVG resizing to fit

SVG resize trick discovered 
s1.viewBox.baseVal.width += 10;
s1.viewBox.baseVal.height += 10;
On to implement a nice looking page

May 19
- wrestling with SVG resize problem

May 18
- do not scroll image list on initial load
UI rework:
- display the book page nicer
- display nicer page thumb
- drag/drop, positioning of images (magnet sides, etc)
- image delete button
- text tool

May 17

Page save queue: save within 60 seconds|when page switches
Page save queue: retry on failure.
Implemented. Still not happy with my code. But it is tough to code
for async stuff:
- put page on save-later queue. 
- move from save-later queue to save-now
- if save fails, put it back on the save-now queue
- if page closing, move all to save-now queue

Implemented custom notifiers - PB.getMessageBar

Image upload queue: retry on failure. Implement with global network failure filter
This was tricky to do due to endless chaining of Deferreds. Architecture:
- All network queues have networkError filter. The filter needs to be notified
when network error happens, and when everything clears. The filter displays notice,
and retries with exponential backoff.
Image upload queue: display progress: image upload progress meter.

BeforeUnload now displays images remaining to upload


May 13
Blech, all erands, all the timem, no coding.
1 thing! Dropping images now works in Chrome!

May 12
Errand day again: truckee loan, tired
Implementing "warn before leaving page if something in progress"
onbeforeunload checks all queues. If active, gives user option not to leave the page
Image upload now uses jQuery, has its own queue

May 11
Another crappy day. Hungover, had to deal with loans, passport renewal at the post office
Implemented rake test:seed

May 10
Implemented rake db:clean
rake environment RACK_ENV=development|test db:clean 
Implementing image resize on demand. Want to test it with unit tests
Working on test/helper/seed
Busy day: had to deal with well digging, getting birth certificate, loan refinancing, linda loan

May 9
Redid the DeferredQueue architecture. Like it. Made the image loading bug trivial to fix
Have initial javascript unit tests.
I do not like my PB.blah/blah naming scheme.
All functions get lumped under PB.
PB.fn is for objects, got rid of it

May 6
Ran into bugs: jquery.show(100) does not work. My deferred jobs get lost.
Redoing the Deferred Jobs architecture.

Drop images
Better book saving
Menus/buttons http://www.1stwebdesigner.com/css/38-jquery-and-css-drop-down-multi-level-menu-solutions/

May 5
Redoing the UI to slab style. Visual is there, restoring functionality.
Upgraded jquery to 1.6

May 4
Very preliminary test setup, can test urls

Apr 29
Installed Selenium IDE to Firefox. Needed beta, since release does not work with FF4
Figuring out Ruby testing framework
Will use Rack::Test for Sinatra
Test::Unit looks nice and simple
Intro: http://test-unit.rubyforge.org/test-unit/Test/Unit.html

Apr 28
PHASE 2:
generating PDFs was awesome, now it is time for phase 2.


Apr 26
PDFs are getting rendered. I've finally closed the loop!
Using inkscape to convert from SVG to PDF
Using some silly python script to join PDFs
Yay, this is Alpha 1

Apr 25
Try rendering to PDFs
Fix the many shortcuts:
Progress on image uplad
- Fix image urls before upload
- Save pages when we leave the page, etc.

Apr 22
IMAGE SAVES WORK!
Regex fix: fixing the image tags
Fix mangling of the <image> tag in SVG
Book deletion done. Opted for manually maintaining associations
Page upload in process
- Tried to implement drop feedback through CSS on images. Did not work,
because SVG's CSS is crippled (no box-shadow, etc).
Saving of photo pages
Saving of photos when they were dragged before book was created

Apr 21
Photo deletion deletes the file
Loading images from the server
Enclosed photo canvases within a div in prep for progress work

Apr 20
Analyzed Thin, to see if we could stream the requests. It can be done.
thin/request.rb:parse method gets called repeatedly by connection.rb:receive_data when request comes in
we could override request.rb parse. There are two cases that need to be handled:
- save the partial post if interrupted 
- tell client to only send us remaining part of the body
Implemented file upload.
This project is more work than I imagined (of course)
Fixed the silly session expiration error. I forgot that initially I expired sessions after a minute

Apr 19
Writing down the photo architecture was difficult, so I jotted down some scenarios,
and started coding.
- computing md5 takes at least 16 seconds, skip it.


Apr 14 - Imagew architecture
Image architecture. Images are a little tricky, need to be architected.
- Images can come from many sources: local HD, oauth2 apis
- We want to conserve bandwidth, disk space
- Images are displayed: in the book, icons on image strip, on pdf

scenarios:
* local file dragged to the book
  - put it in the image load queue
    - check for duplicates against image list, and on the server /image/md5
    	- already there, tell user it is a duplicate, load it
    - load image from file system
      - create a temporary icon in the photo list
    	- success? upload_to_server, add to the image list while creating an icon
    	- fail? notify user that file format is not recoginzed, remove file from the list
* facebook image dragged to the book
 	- post /images/new/remote
 		create temporary icon
 	  poll or have event queue come in from the server
 	  on the server, download image as a DelayedJob
* upload to server
  - put the file on the upload queue
    - put file post /images (use sips to rotate/resize images)
    
* book is loaded
  $("image.book_image").each( function(image) {
  	imageBroker.loadInto(node);
  	image.setAttributeNS(xlns, 'xlink:href', 'loading');
  })
  image
* pdf is generated

Check local files against duplicates on the server with md5? Yes, if it is fast enough

HTTP API:
get /photos/md5/:hash returns image record, fails if not
post /photos { local or remote data } returns image record, or redirects to restart upload
  => local data { filename: , body: , mime_type }
  <= image record
post /book/:book_id/photo/:photo_id -- associates image with the book
delete /book/:book_id/photo/:photo_id -- removes image/book association

JSON:
image {
	id: 
	original_id:
}

DB SCHEMA:

Photo:
id:string
original_id:string -- file name for local files
local:string where is the image stored locally
md5:string identity hash

Photos_Books:
image_id:
book_id:

JAVASCRIPT

ImageUploadQueue


Apr 13
lazy day, kids AM, sleeping PM

Apr 12
Book belong to user. Editor template loads books
Added asset_link for future proofing
Put timestamps on all models
Moved models to separate directory

Apr 11
Back from mendocino.
Progress bar: used jquery.ui because FF does not support progress
Wrestled with icons & buttons with jquery ui, no success, easier to roll my own
Implemented error & notice. They look nice now

Apr 8
No coding, getting ready for Mendicino
Got 
Apr 6
Finished sessions. I've coded a custom session middleware. This is because I did not
like the default setup:
- all sessions were part of the single cookie
- session was written out for every request
110 lines of code mean I do not have to understand all the others
Rewrote our flash architecture, using Rack::Flash instead

b) partials
c) pages:
/account - show username, last login
/admin

Apr 4
The name is SvegPhoto
Got a name from my app while running: PhotoAl.
But, photoal.com is taken. PhotobookPlace is not. I hate having photo, or book in name.
http://mashable.com/2010/05/28/naming-startup/
Login: logins through Google & Facebook

Apr 1

Mar 31, early AM
Fix the server losing books table bug: done, stored on disk now
Dragging images onto SVG finally works.
I had to wrap SVG objects with right properties for jQueryUI to work
DOM manipulation of SVG images is a pain. They look like DOM, but behave differently.
D3 is amazingly beautiful, Mike Bostock is super smart. Must play with it some more.

Mar 30
SVG elements have className that is not DOMString, but SVGAnimatedString
This messes jQuery up. 

Images are being dragged, no drop on SVG yet.
Hiding some data in the models
Digging into why my sqlite memory database disappears
rdb source command is missing
I should download 10.5rc1, but it is missing ruby-debug-base dependency
I'll need to build it from scratch

Mar 28
Book & Page tabs:
first jQuery extensions:
revealByMarginLeft is a helper for slider scrolling
reflowVisible helps with reflows when elements are visible
click to display page: remember, you can't select by data, only attributes

Mar 25
Started the book page tab. Refactored editing code into two files. Bitten by "element dimensions are not available when hidden" bug.

Still struggling with my tools. I need speedy server debugging capabilities,
and a good js code navigator.
- TextMate throws up trying to display an js outline.
- Netbeans does ok
- Eclipse displays nothing
- My thin server keeps dropping the books table, requiring a restart



Got snowed out of Tahoe, so back to coding.
SVG to Canvas overview. http://www.svgopen.org/2010/papers/62-From_SVG_to_Canvas_and_Back/index.html
Bottom line: no easy way to do this.
Workaround: fake it. Drawing text placeholder & images on canvas will be enough

Mar 24
YAY: we've displayed an SVG book cover page
Rewrote the book initialization code.
I had trouble propagating, and attributing errors correctly in datamapper
I had to use transactions, as associated models cannot be added before
the parent has been saved.
rdebug sometimes took too long to start. Using 'ruby-debug' require with debugger
instead. Drawback is that it does not use rdbrc file.


Mar 23
Implemented:
	- ajax architecture for editor. Forms with data-remote get remoted automatically
	- ajax responses: html replaces main-content by default
										json gets handled on case-by-case
	- json generation, book & pages

Mar 22
Diddled around with templates a bit, created 1st SVG file

Create 4 svg pages.
Load them, and see what happens when I drag images.

Take a look at SVG http://people.mozilla.com/~vladimir/demos/photos.svg
svg converts straight to PDF :), might need 
http://www.somebits.com/weblog/tech/good/svg.html
Nelson discovered SVG around the same time.
Uploading files in Sintatra

Mar 21
Rewrote ImageLoadingQueue
Firefox memory usage still shoots sometimes. gfx/surface/image is the problem
Unlike image cache which is on a timer, this cache gets emptied unpredictably.
Bug where they work on the cache:
https://bugzilla.mozilla.org/show_bug.cgi?id=466586
I could use it to track down what exactly happens.

Mar 18
Refactored. Models are separated out:
Timer - util
EventListener - mixin 
Book 
BookImage
Deferred pattern makes code more understandeable
Antsy to get started on page layout, but refactored code makes me happy

Good place to get things designed:

Mar 17
Did a bit of a code review. My js is too messy, I'd like to refactor. Deffered jQuery
pattern holds promise.
Saw backbone.js. http://documentcloud.github.com/backbone/#faq
They've implemented lots of stuff I've thought about, and more. Feels like like
too much to take on right now.

Mar 16
I like working with Sinatra. I got comfortable with the debugger, datamapper, It makes me learn interesting things. The docs are incomplete, of course. Some surprises:
- Sinatra configuration :set creates a method on the app. I expected a get/set attr API

Moved from top-level app to modular API. I do not like indeterminate namespaces.
Starterd working the forms, return values, etc. I think it'll be easier than rails.

Mar 15
Trying out Sinatra. Pete Warden's "Social Hello World" talked me into this.

Mar 14
Thinking about moving to Sinatra. Rails documentation sucks in several major ways 

1) All functions take a grab-bag of options
2) Documentation is a large linear dump of all method calls. There are 6 methods named render, one of which is relevant.
3) The framework makes easy things easy, and hard things a guessing game. How do I use nested forms if one of the arguments is not an ActiveRecord? I hate coding via trial and error
4) Learning Rails feels like learning one damn thing after another, I never get to see the big picture.

With Sinatra, the hope is that the learning curve will taper off.

Deployment: Pete Warden uses heroku, I can start with it. Heroku runs on Amazon. 
I think that figuring out deployment will take me a month.
Heroku will store data in S3 temporarily

Mar 11
Diving back into Rails.
photo_book_controller::create
Tricky problem of using a single form to edit two models: photo book + template
I wanted rails form helpers (error handling, saving of form data between pages for free)
For two models in a single form you want nested forms. 
Template needed to be a photobook nested attribute.
As PhotoBookTemplates are not ActiveRecords, or inside db, my template fakes being an ActiveRecord. 
The fakery happened through several simple routines.

Mar 9
Clean up the uglyness
What does photobook looks like as json?

Mar 8
Creating rails framework for books
Back to rails!
field_error_proc removal was a surprise. 

Mar 4
Thinking about dropping those images, what a page looks like

Mar 2, 3
implemented image slider, looks great

Mar 1
- debugging memory issues. When loading 80 images, Firefox usage would grow very large
and the whole computer acted sluggish.
I investigated by loading 2000x5000 simple PNG images. PNGs were being cleverly compressed.
An image can be up to 40MB uncompressed (2000x3008x4). Firefox clears its in-memory image
cache after 10 seconds. Average image takes 1/3s/load.
That means after 10s, we have 40x30, or 1.5Gb in memory, causing machine to slow down.
Slowing down the memory 
Feb 23
Implementing tabs
http://stackoverflow.com/questions/773074/vertical-tabs-with-jquery

Feb 21
Implemented simple qt html2pdf renderer
seems to render the entire image re-encoded as jpg
for final product, might have to hack qt.
src/painting/qprinter.cpp creates a QPdfEngine
will need specialized QPdfEngine that would encode images in original form
see qprintengine_pdf.cpp::drawImage, it reencodes it from Pixmap. Might run into trouble with effects,
text on top, etc.

Feb 14
wkhtmltopdf bugs:
increasing DPI to 300 rotates the image on a sample photo
decreasing dpi in reference image does not reduce the dpi
for photo books, we'd need strict control over dpi/colors
need to understand what qt is doing:

http://labs.qt.nokia.com/2009/01/15/capturing-web-pages/
http://discussion.forum.nokia.com/forum/showthread.php?191374-image-rendering-problem-with-webkit

TOPICS
BUSINESS MODEL
- Blurb.com: show them the demo
DEALING WITH IMAGES
Need to auto-rotate rotated images
Image upload: http://hacks.mozilla.org/2011/03/the-shortest-image-uploader-ever/

FEATURES:
- Photo import:
	hard drive
	web sites: Picasa, FB
- Images
	auto-rotate JPGs on import
- Business structure:
	allow

Idea 1: 

PDF generation:
http://tomayko.com/writings/pining-for-pdf-in-gecko
a guy wrote a printpdf extension for firefox
wkhtmltopdf
need to generate exact representation
no margins: -B 0in -L 0in -R 0in -T 0in
width/height: --page-width 6in --page-height 6in
Python PDF generator
http://www.xhtml2pdf.com/doc/pisa-en.html

Upload:
price per GB is not so high, might be slow (use flash for this?)

Reading XMP & EXIF
https://addons.mozilla.org/en-US/firefox/addon/fxif/

Thanks to:
Sinatra
OmniAuth
html5doctor.com/html-5-reset-stylesheet/
transfrom jQuery hook by louisremi
