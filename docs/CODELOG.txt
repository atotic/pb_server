 Feb 14th estimates:
2 weeks: comet, image resizing delayed, nginx
1 week: kill datamapper, use sequel http://rhnh.net/2011/11/29/datamapper-retrospective
2 weeks: unix deployment
2 weeks: log in to fb/browser_id
Finished on Apr 23rd. 7 week estimate, 9 week completion
8 weeks: editor rewrite, touch style, drop images from anywhere
	jun 8th, 6 weeks into rewrite, just have the bare bones ui, jsdiff
	reason for slip is that UI needed complete rewrite
1 week: security/sharing
2 weeks: own store

Featuritis:
switching page/book layouts (template matching), use nokogiri for it
hash bangs for pages
- assets css/js that comes with the book
- assets css/js that comes with the page
migrating albums: use nokogiri for html manipulation
Add page|delete|change layout

Next:
The new photobook framework. There will be lots of rewriting.
I like unit-testing, we'll see if it works for GUI.
Developing 3 GUI editors simultaneously:

Touch (mobile)
TouchXL (tablet)
Mouse (wimp)

Would like my code to be service oriented:

Basic functionality:
setup
- bookmarks for testing on phone
: use ip configuration on Verisign
library
- upload queue
- streaming
- flash/notify framework
- image upload
- patching
- events
- gui widgets

testing
- qunit server. straight api testing

Plan:
Implement the rest of the functionality. Total rewrite, old code will get reimported.
	- editing:
		add images (auto rotate right away, resizing as delayed job)
		delete images

Stage 2: get templates/printing
5 weeks
Google Drive integration? https://developers.google.com/drive/

Next:
- image upload via DND
- load photo data when book is loaded
- handle "upload too large errors" (show bad photos with name, remove from book)
- BUG: book saved with temp- files, prevent at all costs
- Pass the 200 file upload test
- account page should load book list dynamically  $(window).unload(function(){});
- exif, parse on client and server, use image orientation

Aug 6
Apple bug: refiled
fix image sizes: photopalette maxwidth to 128. Drag images are generated on canvas
Bugfix: roughPages have ids, patching was not workin


July 26
Photo upload works
Preparation for separation of book and photos.
Mixing objects and server data gets messy. Maybe I should do clean separation
DONE!
GUI stores pointers to Proxy objects, which are persistent through lifetime of the book.
iOS bug report: node removal erases touch event handlers
July 25

July 23
Got iPad 3. Had to work around two bugs:
- moving a node unregisters its touch event handlers
- images have to be madeDraggable on a timer. Inline
registration of touch event handlers is ignored. Yet it works for
others. Could the problem be limited to topmost handler?

July 19
- Dragging hidden dom images solved (need a timer)
- drag feedback on touch solved
- book lock when book patch fails
- 404 when resources not there

July 18
Refactored DragStore. Cleaner API, expandable

July 17:
Drag animations: Image -> RoughPage, Image -> Remove

July 16:
- error notifications are working again
- network down error retry with backoff implemented

July 13:
- patches are broadcast, and work accross devices. All actions seem to work
- GUI could no longer point directly into model, use proxies instead. Direct pointers
were broken after patches.


July 11:
- JsonDiff compression optimizations did not work
- removed/* Optimizations did not work
	I was hoping to replace delete/insert pairs with a single move
	This fails because delete and insert position in diff queue is important:
	- insert: parents must be inserted before the child
	- delete: children must be deleted before the parent
	The main motivation for move was to avoid massive diffs when an array is shuffled
	This would happen if pages were kept as an array
	Takeaway: minimize array use.
*/

July 10
Patching framework
- database table: book_diff_stream
- book patch saved
- patches broadcast back to client

July 5
Save before navigating away warning
Load book with JSON to bypass back/forward cache

July 3
Saving to server: DONE
Server document patching works. Need more test coverage for JsonDiff,
but it'll do for now

June 29
Started saving to server, my first experience with "PATCH"
Codeflow with patching is a lot cleaner


June 28
bug: $._data no worky
Model synchronize photoList with book.photoList. Show all/unused
- dragging image to delete button: DONE

June 27
Hooking up roughPageList model changes
- when clicking add button: DONE
- when dragging page to delete button: DONE
- when dragging rough pages around: DONE
- when dragging add button: DONE

June 26
Progress towards model-driven GUI changes
image to rough page now works
Design for GUI/MODEL sync is clever, documented in architecture:
- every GUI element has reference to model as data('model'), and
listens to PB.MODEL_CHANGED events
- models broadcast PB.MODEL_CHANGED events, they are
automatically sent to all dom elements that have matching data('model' id)
Model->GUI broadcast
- when dragging image to rough page: DONE
- when dragging image between rough pages: DONE
- when dragging image to delete button: DONE

June 21
Display photos inside rough pages on load
fix: can't drag images out of cover pages

June 20
Display rough pages

June 19
Back into swing of things after 5 days off (Tahoe, etc)
Implementing the real editor now, images have been displayed.

June 13
Started coding new architecture.
Using less, need less gems, rake deploy:css generates css files
Ripped out jquery-ui
Book stores json_data as mediumblob

June 12
Working on architecture, see UI.txt

June 11
Created branch release/first_editor
Starting the new new editor
Implemented fingerprint drag, refactored code.

June 7
All touch drags work. It was not as much work as I've thought.
Had to work around iOS bug where events were not being transfered as part of DOM move (detach, insert)

June 5
Remote debugging with weinre works (ocasionally). console.log on ipad does the job too
My first touch drag is complete!

May 31
Add button hooked up
Keyboard shortcuts (keyPress is the only event where I can reliable get charCode)
More dnd work, looks nice.
Drag small images
Deleting pages
Editing looks really good now!

May 30
mockup is looking good, page add/remove left to implement

May 25
Image scrolling done. Like the vertical multiple image scroll a lot
Popup is there
Working on drag'n'drop

May 18
Got 250 images as assets/test/X.jpg

May 17
Getting bootstrapped
Compiled it from scratch with node.
make bootstrap # does it
You can also download customized from http://twitter.github.com/bootstrap/download.html


May 15
Missed work, did Boot2Gecko privacy. Got to meet with some guys at Mozilla
serve different pages for touch, touchxl, wimp
Implemented 'sveg.touch' middleware check
Automatically load *.touch.erb on touch sites.
javascript touch redirect

May 10
hosts:
www.pb4us.com: wimp site
touch.pb4us.com: touch site
dev.pb4us.com: development, points to macbook
touchdev.pb4us.com: development, points to macbook



May 9
Lots of JSON work: diff.js, and pbdiff.rhtml
JSONPath: js implementation of jsonpath. Wrote from scratch to support set/path API
JSONDiff: simple object diff through insert/delete
I've tried to optimize diffs with move, but it did not work. Idea was
that insert+delete => move. This did not work because operation order matter:
- insert requires parent to already be inserted
- delete must happen before parent is deleted
This was done to optimize movement of pages within the array.
Instead, I'll avoid arrays, and try to use index to sort elements
Used qunit extensively, it was awesome. Loved the quick debug cycle.
Will try using it for GUI too.

Apr 25
Authentication works on Mac
nginx must run on port 80 for oauth2 redirects
See this for setting up nginx on Mac startup: http://superuser.com/questions/304206/how-do-i-start-nginx-on-port-80-at-os-x-login

Starting UI 2.0 design
Using Synology as a DNS server for iPhone. Use SynDnsmasq, gave up on config file


Apr 23
Facebook/Google/Developer authentication done

Apr 19
Created Google Apps pb4us domain
removed 1.8 compatibility
added email field to user
Mail sending works.
servers@pb4us.com

Apr 17
cleaning up move to pb4us master project
starting on email

Apr 16
delayed_job should run as deploy user use change_privilege
1st successful total run on Ubuntu
pb4us project as master git template. Did not use git built-in
submodule management, because submodules do not allow editing of subprojects.

Apr 13
servers run on startup.
the trick was to wrap binaries with rvm wrapper command
the thin servers could not find delayed_job_sequel gem, have to install manually
delayed_job still running as root

Apr 12
chrome now runs inside xvfb. The whole server has been daemonized
Setting up chromium extension as rake task

Apr 10
everything works on ubuntu

Apr 9
Logging tests finished. It is a large test suite, each server
has to be tested for access/error in debug and daemon configuration.

Apr 8
lost week, Oliver's vacation. Implemented MiniProfiler middleware

Mar 30
all servers running on linux, as deploy
install nginx
configure nginx
using vanilla nginx install
rake deploy:initd creates all the files in initd
Firewall
Run delayed_job as initd


Mar 29
Starting thin server menagerie on linux. Ended up with a simple solution
using rubygems-bundler gem
Reworked start/stop scripts to spit out conf files
Created deploy:initd rake task to put these in /etc/thin
rvmsudo does sudo for rvm

Mar 27
Installing SublimeText was sublime
Linux install continuing. Major pain points:
mariadb: installing 5.5 caused mysql2 gem to fail, reverting to 5.3 took work
ruby-debug: why do they do this to me, hand-rolled install from a gist
nginx is the only one left

Mar 26
Move chrome into git template: patch the config
Created github projects. Created new ssh key for private repo deployment on servers
My git-fu is weak
Moved data directories to pb_data
Compile chrome on ubuntu

Mar 23
Faster download for nginx, use X-Accel to serve out of data directory (nginx will need to get access to data directory, not configured)
Named the site: pb4us
Moved templates out to pb_templates
Moved chrome_profile and pdf_saver_extension to chrome
Built Ubuntu 11:10 virgin VM

git magic that pruned my tree:
git clone sinbook pb_templates
cd pb_templates
git remote rm origin
git filter-branch --index-filter "git rm -rf --cached --ignore-unmatch public script test views lib docs db config"
rm -rf .git/refs/original
git reflog expire --all
git gc --aggressive --prune
git filter-branch --index-filter "git rm -rf --cached --ignore-unmatch Gemfile Gemfile.lock Rakefile comet.rb pdf_saver_server.rb sveg.rb comet.rb"

Mar 23
Fought with thin HUP interrupt again. Made a patch on github
Sequel cleanup, minor fixes for book generation

Mar 21
Ruby 1.9.3 compatibility tests:
Lots of work, getting the debugger to work was the hardest, required manually installing some gems.
See http://stackoverflow.com/questions/4062925/ruby-debug-install-error-failed-to-build-gem-native-extension

Mar 20
Met with Spence to get the goodies on deployment.
Deployment with git is easy, just clone it. He looked at Capistrano, thought it was too complex
Deploying secrets in production is an unsolved problem
For servers, create special user and group, give them nothing

Mar 19
Resizing & orientation, done.
Orientation takes 1.3s beause of slow imagemagick startup. Only done if needed
Resize takes ~0.6s
Installed Ruby 1.9.3 with rvm. Problems:
ruby-debug has an issue, use 'debug' gem instead
Need to figure out how to work the require paths
rvm use 1.9.3
rvm use system

Mar 16
nginx works. Most of the problems were related to my servers. So many moving parts:
Sinatra's protection was the trickiest, what threw me off was that I assumed
my logger was telling the truth. Instead, Sinatra was changing server response
under me without notification.
Rest of the problems were minor, Sequel migration leftovers, and debugging artifacts.
Firefox sneakily drops the XHR response if it detects cross-site scripting

Mar 15
Sveg was returning 403 responses to nginx.
I did not detect this, because my logger was below Rack::Protection
Need to learn about rack-protection, bunch of middleware

Mar 12
Ooops, tested syncing, not working between chrome and FF.

Comet testing complete.
My ajax calls are not sending the authentication cookie.
Tracing cookie problems with:
sudo tcpdump -s 0 -A -i lo0 'tcp port 28000 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)'
Cookies cannot be forwarded to Comet server. To test, will need nginx

Mar 8
Book deletion deletes all dependents

Mar 7
Sequel migration complete. All tests pass
branched delayed_job_sequel on github, will try to merge

Mar 6
Sequel migration went a lot smoother than I thought. delayed_job server
is the only thing not working.
Sequel is a pleasure to work with.
32 files changed, 621 insertions(+), 672 deletions(-)
More code has been removed than added!

Mar 5
Sequel migration: I'll be happy to leave DataMapper. The 5 sec startup time
was killing me. Other reasons for leaving:
- documentation is iffy (sequel not that great in this respect either)
- migrations were getting tricky
- in general, did not feel solid, when pushed, had to jump through a lot of hoops
- hated many gem dependencies
- felt far removed from SQL

Feb 29
sessions/flash reimplementation done

Feb 25
parents here for a visit

Feb 18
Baby girl (vivian?) was born!, weeks off ahead

Feb 15
Servers pass tests
Implementing comet server
Switch to mysql.
mariadb: open source drop-in mysql replacement instead, mysql seemed rusty
brew: another os x package manager
uninstalled macports

Feb 11
PDF generation works.
All servers are nicely controlled via scrips

Jan 18
Got delayed_job daemon working. No jobs yet.

Jan 16
working on deployment. Use
Jan 10, 2012
PDF generation is complete. I've extended Chrome 18 with pageCapture.saveAsPDF extension.
The commercial potential seems weaker, everyone is trying to do books. Interestingly, no
one is doing HTML.
I will continue pursuing the project as a learning experience. The best outcome would be
a hobby project that starts small, and grows into digiprints.
Next: make the project visible:
Github for the server
Chrome patch
Migrate to Amazon:

Dec 22
ChromePDFSaver: my extension runs and returns the blob.

Dec 16
Created Chrome extension autopdfsave:
- automatically generates PDF files for every window loaded
- stores PDF on server
PDFSaver rack-based server, stores
Dec 13
PDF generation via Chrome
PDF generation is part of Chrome, not of WebKit's test shell
Best approach would be to get Chrome to generate the PDFs.
Write an extension that does this?
There is no API for extension to print to PDF. Can I create one?

Nov 18
Saw Keepsy. These guys are awesome. I love decoupling of image placement from
layout details. I think I need to sell my project
Things I did not like: Flash: it'll get harder as time goes on. Inability to
start the album immediately. Image import should be fluid.
Do not know the book dimensions/quality

Nov 16
Page pane scrolling

Nov 14
Add/removing of pages done. Tested undo/redo, sharing

Nov 11
Massive checkin, implemented adding of pages. 488 insertions(+)

Nov 10
Make PUT /pages work with server streams!

Nov 9
412 failure handling works
cmd_stream restarts

Nov 2
First successful streaming of AddLocalImage. Lots of little details, it was a struggle all the way

Oct 26
Understand the right way to do streaming
- avoid Sinatra stream. It does not implement close callbacks, long-lived connections
- how to send headers: thin example differs from Sinatra
- how to send body
- contact Thin guys with my patch
- examine my middleware

Examining Thin examples:
- ran into trouble with Lint middleware. Rack has default middleware. Turned off with
rackup -s thin -E none async_app.ru
Thin examples timeout just like mine

Oct 25
CommandStreaming work, got 2 clients hooked up, working through bugs
- our connection gets closed after 30 seconds
- Thin by default closes connections after 30 secs of inactivity
- I want to change connection timeout on all async connections to infinity
- This cannot be done in sinatra (API does not allow access to connection)
- It can only be done on thin: lib/thin/connection.rb:120
    if @response.body.respond_to?(:callback) && @response.body.respond_to?(:errback)
        self.comm_inactivity_timeout= 43200


streaming to the clients using jquery libraries
UploadImage broadcast

Oct 21
Sharing/Offline framework took a lot longer than expected. It is still incomplete,
but it is feasible.
The hatching of server streaming framework
Sinatra 1.3 has streaming support built in.

Oct 13
	updating to Lion
	Sketch out the architecture for commands/offline/sharing
  adding pages in the right place
  add N pages, at random
  change page layout

Oct 12
	Ingrid has fever, sick
	Load book json inside the template, skip ajax
	Add page.position to BookPage object (rb/js)
	Look into cache control. We do not need to get template twice, should be cached. Max-age is set by browser
	Pretty book page display

Oct 11
	implemented prev/next on arrows
  filter as text/images/etc

Oct 7
	still working on "pick a template dialog". Like the result so far
	sorted YAML in YAML::DUMP, avoids needless checkins

Oct 6
  template REST API: GET /template/:id
  sample "pick a template dialog" showed up


Oct 4
Finshed cloning modern_lines apple photo book. It took about 10 hours.
Full-featured photo books will need much more interesting CSS, there are no frames,
rotated images, lines, text is generic.

Oct 3
represent text in default icons

Oct 1
Nanny quitting, days blown
create a nice sample template: multiple images, images for whole page, frames

Sept 30
update html icons when page is updated

Sept 29
integrate with UploadImages
 - show progress for image uploads
 - test xhr errors
integrate with "Leaving page dialog"
integrate with UploadPages
give pages chance to upload every minute on a timer
unify pageUploadQueue and imageQueue into objectUploadQueue
templates listing

Sept 28
Making progress on the new UploadQueue.
Anders got me up at 5, Ollie was doing badly at school, only late night hacking worked
Implemented real tests for UploadQueue
Will simplify lots of code
uploadQueue should filter out duplicate requests (or shuffle them to the end?) - create a test page for this?

Sept 23
generate ids when BookPage is created - what elements need and id?
convert guaranteeId to not create ids
use html icons to display pages


Sept 22
Further rake tasks
generate icon html
resize asset images
image count
assets small size serving
return html icons with page json

Sept 21
Pages coming along. Working on rake tasts to generate icons


Sept 15
Upgraded jquery
Architected "ID problem"
Refactoring of code to remove ID usage

Sep 13
No dojo: read the book. I did not like the feel of the project. More enterprise, less modern than jquery
Using qunit instead

Sep 8
Dojo work
http://dojotoolkit.org/reference-guide/util/doh.html
http://www.sitepen.com/blog/2008/04/15/unit-testing-custom-code-with-the-dojo-objective-harness/
http://www.sitepen.com/blog/2010/11/15/from-jquery-to-large-applications/
http://blog.rebeccamurphey.com/2009/11/12/dojo-confessions-or-how-i-gave-up-my-jquery-security-blanket-and-lived-to-tell-the-tale

Sept 7
Redid my testing code, now works
Page ordering: added new db field
Implemented some js, and decided that I want a js unit testing framework.
Dojo seems most mature.
Ideally, I'd load tests, and load dojo from CDN

Sept 1
/assets/:template_name/:asset_file implemented
simplified error handling on book initialization
decided not to do offline right now

June 30
Text done. Looks off, but functional
Reworked manipulators. Now they are only shown on mouseover.

June 28
Back from Sayulita, feeling happy

June 17
Undo/redo of text edits
Happy, Happy Text edit paste of facebook comments works!
Text is just a div. It has template text "Type here", which changes when type. Type here is not printed.
Tools: click to edit, click outside to complete. Edit mode highlights with a nice round border

June 16
Crappy day, got little work done. Starting work on contentEditable. Implementing
contentEditable is trickier than I thought.
Added VisualEvent debugger tool.
Got FF contentEditable to respond to first click. It responds to click event, broadcast

Jun 14
border-image is unusable because of gaps upon transform in Firefox and Webkit
https://bugzilla.mozilla.org/show_bug.cgi?id=455308, filed one for Webkit too

Jun 13
Experimenting with border-image. We've got a few problems:
- importing hi-res versions of the photo. Css needs to change. Books should have css associated
-

Jun 10
Image placement hints done, with a beautiful test page in our new test book.
Implemented test book
Implemented yml properties for initial book layout

Jun 9
Bug fixing manipulators.
Zoom works

Jun 8
undo works accross pages
constraints on everything but zoom

Jun 7
exposed unmatrix method from transform.js to decompose transformation matrix
Firefox bug: getClientBoundingRect does not take transform into account.
This issue is still being discussed in W3C, I'll work around for now.
Redid the button interaction: click now starts a mode
fix rotate/pan when image is rotated
shift constraint for rotate

Jun 6
Reimplemented innerHtml. We need styles to be saved in canonical webkit style, and restored
upon loading into browser.
Undo/redo bug fixing
Image commands are in demo stage. Need buggixg.

Jun 3
Reimplement innerHtml. The trigger for this was FF not saving style.transform.
The alternative was parsing and cleaning up innerHtml output.
It is always good to own the 'core competency' code.
http://www.whatwg.org/specs/web-apps/current-work/multipage/the-end.html#html-fragment-serialization-algorithm

Jun 2
- implemented pan/move/zoom/rotate
Solved a bunch of problems: Javascript default prototype inheritance is a pain,
used jresig library instead. His library uses arguments.callee, which are not allowed
in strict mode. I am still trying to wrap my brain around what that code does.
Workaround: disable strict mode in editor.js
- command framework, undo/redo


Jun 1:
Testbed for image manipulation. Implemented all operations without constraints
Could not implement image rotation about image center. There is no way to find image center
in page coordinates once it has been transformed.

May 31:
PDFs are generated with the correct size. Using inches is useless, as
they map to 96px. PDF generates 72px/in.

May 27
Movie with Mike

May 26
svg rip out complete, pdfs are generated
remaining problem is that pdfs are enlarged by 25%, need to make them WYSIWYG

May 25
wkpdf: forked, compiled, fixed some bugs, sent my 1st github pull request
Rip out SVG stuff

May 24
- photo dragging in chrome
- button bars: created simplest buttons
text tools:
I ran into trouble here: svg does not wrap text,
and faking text wrap makes me jump through hoops, measuring
character position with moveable spans
Time to rethink SVG. The format is badly supported,
badly designed. Little bugs popping up everywhere you look.
Inkscape is not something you want to base a business on.
HTML->PDF is still problematic. There is a new converter,
wkpdf, which shows promise. Clean, and OS X only for now.
Tested images, JPEGs are embedded fully.

May 23
remove resizing artifacts of SVG element
svg.cloneNode(true)
instead of parsing HTML, deep clone the node, and use DOM operations to clean up
Center the page horizontally/vertically, and give it a shadow
gray background on main-container

May 20
SVG resizing to fit

SVG resize trick discovered
s1.viewBox.baseVal.width += 10;
s1.viewBox.baseVal.height += 10;
On to implement a nice looking page

May 19
- wrestling with SVG resize problem

May 18
- do not scroll image list on initial load
UI rework:
- display the book page nicer
- display nicer page thumb
- drag/drop, positioning of images (magnet sides, etc)
- image delete button
- text tool

May 17

Page save queue: save within 60 seconds|when page switches
Page save queue: retry on failure.
Implemented. Still not happy with my code. But it is tough to code
for async stuff:
- put page on save-later queue.
- move from save-later queue to save-now
- if save fails, put it back on the save-now queue
- if page closing, move all to save-now queue

Implemented custom notifiers - PB.getMessageBar

Image upload queue: retry on failure. Implement with global network failure filter
This was tricky to do due to endless chaining of Deferreds. Architecture:
- All network queues have networkError filter. The filter needs to be notified
when network error happens, and when everything clears. The filter displays notice,
and retries with exponential backoff.
Image upload queue: display progress: image upload progress meter.

BeforeUnload now displays images remaining to upload


May 13
Blech, all erands, all the timem, no coding.
1 thing! Dropping images now works in Chrome!

May 12
Errand day again: truckee loan, tired
Implementing "warn before leaving page if something in progress"
onbeforeunload checks all queues. If active, gives user option not to leave the page
Image upload now uses jQuery, has its own queue

May 11
Another crappy day. Hungover, had to deal with loans, passport renewal at the post office
Implemented rake test:seed

May 10
Implemented rake db:clean
rake environment RACK_ENV=development|test db:clean
Implementing image resize on demand. Want to test it with unit tests
Working on test/helper/seed
Busy day: had to deal with well digging, getting birth certificate, loan refinancing, linda loan

May 9
Redid the DeferredQueue architecture. Like it. Made the image loading bug trivial to fix
Have initial javascript unit tests.
I do not like my PB.blah/blah naming scheme.
All functions get lumped under PB.
PB.fn is for objects, got rid of it

May 6
Ran into bugs: jquery.show(100) does not work. My deferred jobs get lost.
Redoing the Deferred Jobs architecture.

Drop images
Better book saving
Menus/buttons http://www.1stwebdesigner.com/css/38-jquery-and-css-drop-down-multi-level-menu-solutions/

May 5
Redoing the UI to slab style. Visual is there, restoring functionality.
Upgraded jquery to 1.6

May 4
Very preliminary test setup, can test urls

Apr 29
Installed Selenium IDE to Firefox. Needed beta, since release does not work with FF4
Figuring out Ruby testing framework
Will use Rack::Test for Sinatra
Test::Unit looks nice and simple
Intro: http://test-unit.rubyforge.org/test-unit/Test/Unit.html

Apr 28
PHASE 2:
generating PDFs was awesome, now it is time for phase 2.


Apr 26
PDFs are getting rendered. I've finally closed the loop!
Using inkscape to convert from SVG to PDF
Using some silly python script to join PDFs
Yay, this is Alpha 1

Apr 25
Try rendering to PDFs
Fix the many shortcuts:
Progress on image uplad
- Fix image urls before upload
- Save pages when we leave the page, etc.

Apr 22
IMAGE SAVES WORK!
Regex fix: fixing the image tags
Fix mangling of the <image> tag in SVG
Book deletion done. Opted for manually maintaining associations
Page upload in process
- Tried to implement drop feedback through CSS on images. Did not work,
because SVG's CSS is crippled (no box-shadow, etc).
Saving of photo pages
Saving of photos when they were dragged before book was created

Apr 21
Photo deletion deletes the file
Loading images from the server
Enclosed photo canvases within a div in prep for progress work

Apr 20
Analyzed Thin, to see if we could stream the requests. It can be done.
thin/request.rb:parse method gets called repeatedly by connection.rb:receive_data when request comes in
we could override request.rb parse. There are two cases that need to be handled:
- save the partial post if interrupted
- tell client to only send us remaining part of the body
Implemented file upload.
This project is more work than I imagined (of course)
Fixed the silly session expiration error. I forgot that initially I expired sessions after a minute

Apr 19
Writing down the photo architecture was difficult, so I jotted down some scenarios,
and started coding.
- computing md5 takes at least 16 seconds, skip it.


Apr 14 - Imagew architecture
Image architecture. Images are a little tricky, need to be architected.
- Images can come from many sources: local HD, oauth2 apis
- We want to conserve bandwidth, disk space
- Images are displayed: in the book, icons on image strip, on pdf

scenarios:
* local file dragged to the book
  - put it in the image load queue
    - check for duplicates against image list, and on the server /image/md5
    	- already there, tell user it is a duplicate, load it
    - load image from file system
      - create a temporary icon in the photo list
    	- success? upload_to_server, add to the image list while creating an icon
    	- fail? notify user that file format is not recoginzed, remove file from the list
* facebook image dragged to the book
 	- post /images/new/remote
 		create temporary icon
 	  poll or have event queue come in from the server
 	  on the server, download image as a DelayedJob
* upload to server
  - put the file on the upload queue
    - put file post /images (use sips to rotate/resize images)

* book is loaded
  $("image.book_image").each( function(image) {
  	imageBroker.loadInto(node);
  	image.setAttributeNS(xlns, 'xlink:href', 'loading');
  })
  image
* pdf is generated

Check local files against duplicates on the server with md5? Yes, if it is fast enough

HTTP API:
get /photos/md5/:hash returns image record, fails if not
post /photos { local or remote data } returns image record, or redirects to restart upload
  => local data { filename: , body: , mime_type }
  <= image record
post /book/:book_id/photo/:photo_id -- associates image with the book
delete /book/:book_id/photo/:photo_id -- removes image/book association

JSON:
image {
	id:
	original_id:
}

DB SCHEMA:

Photo:
id:string
original_id:string -- file name for local files
local:string where is the image stored locally
md5:string identity hash

Photos_Books:
image_id:
book_id:

JAVASCRIPT

ImageUploadQueue


Apr 13
lazy day, kids AM, sleeping PM

Apr 12
Book belong to user. Editor template loads books
Added asset_link for future proofing
Put timestamps on all models
Moved models to separate directory

Apr 11
Back from mendocino.
Progress bar: used jquery.ui because FF does not support progress
Wrestled with icons & buttons with jquery ui, no success, easier to roll my own
Implemented error & notice. They look nice now

Apr 8
No coding, getting ready for Mendicino
Got
Apr 6
Finished sessions. I've coded a custom session middleware. This is because I did not
like the default setup:
- all sessions were part of the single cookie
- session was written out for every request
110 lines of code mean I do not have to understand all the others
Rewrote our flash architecture, using Rack::Flash instead

b) partials
c) pages:
/account - show username, last login
/admin

Apr 4
The name is SvegPhoto
Got a name from my app while running: PhotoAl.
But, photoal.com is taken. PhotobookPlace is not. I hate having photo, or book in name.
http://mashable.com/2010/05/28/naming-startup/
Login: logins through Google & Facebook

Apr 1

Mar 31, early AM
Fix the server losing books table bug: done, stored on disk now
Dragging images onto SVG finally works.
I had to wrap SVG objects with right properties for jQueryUI to work
DOM manipulation of SVG images is a pain. They look like DOM, but behave differently.
D3 is amazingly beautiful, Mike Bostock is super smart. Must play with it some more.

Mar 30
SVG elements have className that is not DOMString, but SVGAnimatedString
This messes jQuery up.

Images are being dragged, no drop on SVG yet.
Hiding some data in the models
Digging into why my sqlite memory database disappears
rdb source command is missing
I should download 10.5rc1, but it is missing ruby-debug-base dependency
I'll need to build it from scratch

Mar 28
Book & Page tabs:
first jQuery extensions:
revealByMarginLeft is a helper for slider scrolling
reflowVisible helps with reflows when elements are visible
click to display page: remember, you can't select by data, only attributes

Mar 25
Started the book page tab. Refactored editing code into two files. Bitten by "element dimensions are not available when hidden" bug.

Still struggling with my tools. I need speedy server debugging capabilities,
and a good js code navigator.
- TextMate throws up trying to display an js outline.
- Netbeans does ok
- Eclipse displays nothing
- My thin server keeps dropping the books table, requiring a restart



Got snowed out of Tahoe, so back to coding.
SVG to Canvas overview. http://www.svgopen.org/2010/papers/62-From_SVG_to_Canvas_and_Back/index.html
Bottom line: no easy way to do this.
Workaround: fake it. Drawing text placeholder & images on canvas will be enough

Mar 24
YAY: we've displayed an SVG book cover page
Rewrote the book initialization code.
I had trouble propagating, and attributing errors correctly in datamapper
I had to use transactions, as associated models cannot be added before
the parent has been saved.
rdebug sometimes took too long to start. Using 'ruby-debug' require with debugger
instead. Drawback is that it does not use rdbrc file.


Mar 23
Implemented:
	- ajax architecture for editor. Forms with data-remote get remoted automatically
	- ajax responses: html replaces main-content by default
										json gets handled on case-by-case
	- json generation, book & pages

Mar 22
Diddled around with templates a bit, created 1st SVG file

Create 4 svg pages.
Load them, and see what happens when I drag images.

Take a look at SVG http://people.mozilla.com/~vladimir/demos/photos.svg
svg converts straight to PDF :), might need
http://www.somebits.com/weblog/tech/good/svg.html
Nelson discovered SVG around the same time.
Uploading files in Sintatra

Mar 21
Rewrote ImageLoadingQueue
Firefox memory usage still shoots sometimes. gfx/surface/image is the problem
Unlike image cache which is on a timer, this cache gets emptied unpredictably.
Bug where they work on the cache:
https://bugzilla.mozilla.org/show_bug.cgi?id=466586
I could use it to track down what exactly happens.

Mar 18
Refactored. Models are separated out:
Timer - util
EventListener - mixin
Book
BookImage
Deferred pattern makes code more understandeable
Antsy to get started on page layout, but refactored code makes me happy

Good place to get things designed:

Mar 17
Did a bit of a code review. My js is too messy, I'd like to refactor. Deffered jQuery
pattern holds promise.
Saw backbone.js. http://documentcloud.github.com/backbone/#faq
They've implemented lots of stuff I've thought about, and more. Feels like like
too much to take on right now.

Mar 16
I like working with Sinatra. I got comfortable with the debugger, datamapper, It makes me learn interesting things. The docs are incomplete, of course. Some surprises:
- Sinatra configuration :set creates a method on the app. I expected a get/set attr API

Moved from top-level app to modular API. I do not like indeterminate namespaces.
Starterd working the forms, return values, etc. I think it'll be easier than rails.

Mar 15
Trying out Sinatra. Pete Warden's "Social Hello World" talked me into this.

Mar 14
Thinking about moving to Sinatra. Rails documentation sucks in several major ways

1) All functions take a grab-bag of options
2) Documentation is a large linear dump of all method calls. There are 6 methods named render, one of which is relevant.
3) The framework makes easy things easy, and hard things a guessing game. How do I use nested forms if one of the arguments is not an ActiveRecord? I hate coding via trial and error
4) Learning Rails feels like learning one damn thing after another, I never get to see the big picture.

With Sinatra, the hope is that the learning curve will taper off.

Deployment: Pete Warden uses heroku, I can start with it. Heroku runs on Amazon.
I think that figuring out deployment will take me a month.
Heroku will store data in S3 temporarily

Mar 11
Diving back into Rails.
photo_book_controller::create
Tricky problem of using a single form to edit two models: photo book + template
I wanted rails form helpers (error handling, saving of form data between pages for free)
For two models in a single form you want nested forms.
Template needed to be a photobook nested attribute.
As PhotoBookTemplates are not ActiveRecords, or inside db, my template fakes being an ActiveRecord.
The fakery happened through several simple routines.

Mar 9
Clean up the uglyness
What does photobook looks like as json?

Mar 8
Creating rails framework for books
Back to rails!
field_error_proc removal was a surprise.

Mar 4
Thinking about dropping those images, what a page looks like

Mar 2, 3
implemented image slider, looks great

Mar 1
- debugging memory issues. When loading 80 images, Firefox usage would grow very large
and the whole computer acted sluggish.
I investigated by loading 2000x5000 simple PNG images. PNGs were being cleverly compressed.
An image can be up to 40MB uncompressed (2000x3008x4). Firefox clears its in-memory image
cache after 10 seconds. Average image takes 1/3s/load.
That means after 10s, we have 40x30, or 1.5Gb in memory, causing machine to slow down.
Slowing down the memory
Feb 23
Implementing tabs
http://stackoverflow.com/questions/773074/vertical-tabs-with-jquery

Feb 21
Implemented simple qt html2pdf renderer
seems to render the entire image re-encoded as jpg
for final product, might have to hack qt.
src/painting/qprinter.cpp creates a QPdfEngine
will need specialized QPdfEngine that would encode images in original form
see qprintengine_pdf.cpp::drawImage, it reencodes it from Pixmap. Might run into trouble with effects,
text on top, etc.

Feb 14
wkhtmltopdf bugs:
increasing DPI to 300 rotates the image on a sample photo
decreasing dpi in reference image does not reduce the dpi
for photo books, we'd need strict control over dpi/colors
need to understand what qt is doing:

http://labs.qt.nokia.com/2009/01/15/capturing-web-pages/
http://discussion.forum.nokia.com/forum/showthread.php?191374-image-rendering-problem-with-webkit

TOPICS
BUSINESS MODEL
- Blurb.com: show them the demo
DEALING WITH IMAGES
Need to auto-rotate rotated images
Image upload: http://hacks.mozilla.org/2011/03/the-shortest-image-uploader-ever/

FEATURES:
- Photo import:
	hard drive
	web sites: Picasa, FB
- Images
	auto-rotate JPGs on import
- Business structure:
	allow

Idea 1:

PDF generation:
http://tomayko.com/writings/pining-for-pdf-in-gecko
a guy wrote a printpdf extension for firefox
wkhtmltopdf
need to generate exact representation
no margins: -B 0in -L 0in -R 0in -T 0in
width/height: --page-width 6in --page-height 6in
Python PDF generator
http://www.xhtml2pdf.com/doc/pisa-en.html

Upload:
price per GB is not so high, might be slow (use flash for this?)

Reading XMP & EXIF
https://addons.mozilla.org/en-US/firefox/addon/fxif/

Thanks to:
Sinatra
OmniAuth
html5doctor.com/html-5-reset-stylesheet/
transfrom jQuery hook by louisremi
