<!DOCTYPE html>
<html>
<head>
	<title>Test: Innerhtml</title>
	<%= asset_link("jquery.js", "jquery-ui.js", "transform.js", "application.js") %>
	<%= asset_link("editor.js", "editor.model.js", "editor.command.js") %>
	<%= asset_link("jquery-ui.css", "application.css") %>
<style type="text/css">
</style>
</head>
<body>
<%= erb :'layout/header_bar' %>
<h1>InnerHTML</h1>
<div id="sample1" contenteditable="true">
<div class="book-page" style="width: 432px; height: 432px;">
	<div style="-webkit-transform:rotate(90deg) translate(200px,100px);transform:rotate(90deg)">This is the rotated one</div>
	<div class="book-image" style="width: 144px; height: 216px; top: 10px; left: 10px;"><img class="actual-image" style="visibility: hidden;"></div>
	<div style="position: absolute; top: 300px; left: 10px;">Cover page!</div>
</div>
</div>
<textarea id="output" rows="10" cols="60">
</textarea>
<button onclick="doInnerHtml()">dom -> innerHTML</button>
<button onclick="doRestoreHtml()">innerHTML -> dom</button>
<script type="text/javascript">


	// see styleToWebkit docs
function styleToUserAgent(html) {
	return html.replace(/-webkit-transform/g, $.browserCssPrefix + "transform"); 
}

function innerHtml(node) {
	// Book editing needs prefixed CSS styles (-webkit-transform)
	// Our pdf engine expects -webkit styles
	// When saving, all prefix styles are saved with -webkit- prefixes
  // styleToWebkit does this.
	// function styleToUserAgent reverses this
	function styleToWebkit(val) {
		var styles = val.split(";");
		var stylesToRemove = {};
		for (var i=0; i<styles.length; i++) {
			var nameval = styles[i].split(":");
			if (nameval.length != 2) continue;
			nameval[0] = nameval[0].trim();
			nameval[1] = nameval[1].trim();
			var m = nameval[0].match(/(-moz-|-webkit-|-ms-|-o-)(.+)/);
			if (m) { // m[1] is '-webkit'; m[2] is 'transform'
				// mutate -moz-transform:rotate(45) into transform:rotate(45);-webkit-transform:rotate(45);
				// assigns two values to single style entry, -webkit- and non-prefix
				var s = "-webkit-" + m[2] + ":" + nameval[1] + ";" + m[2] + ":" + nameval[1];
				styles[i] = s;
				stylesToRemove[m[2]] = true;
			}
		}
		for (var i=0; i<styles.length; i++) {
			var nameval = styles[i].split(":");
			if (nameval[0] in stylesToRemove)
				styles.splice(i--, 1);
		}
		return styles.join(";");
	}
	
	function serializeAttribute(a) {
		var output = a.localName.toLowerCase() + '="';
		var value = a.nodeValue;
		if (a.localName.toLowerCase() == "style")
			value = styleToWebkit(value);
		output += value.replace(/"/g, "&quot;");
		output += '"';
		return output;
	}

	var singles = {
		area:true, base:true, basefont:true, bgsound:true, br:true, col:true, command:true,
		embed:true,frame:true,hr:true, img:true, input:true, keygen:true, link:true, meta:true,
		param:true, source:true, track:true, wbr:true
	}

	function serializeElement(dom) {
		var output = "<" + dom.nodeName.toLowerCase();

		for (var i=0; i<dom.attributes.length; i++) 
			output += " " + serializeAttribute(dom.attributes.item(i));

		output += ">";
		if (! (dom.nodeName.toLowerCase() in singles)) {
			for (var i=0; i < dom.childNodes.length; i++)
				output += serializeNode(dom.childNodes.item(i));
			output += "</" + dom.nodeName.toLowerCase() + ">";
		}
		return output;
	}

	function serializeText(dom) {
		return dom.textContent.replace(/</g, "&lt;").replace(/>/g, "&gt;");
	}

	function serializeNode(node) {
		switch (node.nodeType) {
			case 1: // ELEMENT_NODE
				return serializeElement(node);
			case 3:	// Text
			case 4: // CData
				return serializeText(node);
			default:
				console.log("Not serializing node type " + dom.nodeType);
		}
		return "";
	}

	var output = "";
	for (var i=0; i < node.childNodes.length; i++)
		output += serializeNode(node.childNodes.item(i));
	return output;
 // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-end.html#html-fragment-serialization-algorithm
}

function restoreHtml(html) {
	html = html.replace(/-webkit-transform/g, $.browserCssPrefix + "transform"); 
	return $(html);
}

function doRestoreHtml() {
	var dom = $(styleToUserAgent($("#output").val()));
	$("#sample1").empty().append(dom);
}
function doInnerHtml() {
	$("#output").val(
			innerHtml( $("#sample1").get(0) ));
}
</script>

