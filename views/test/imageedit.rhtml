<!DOCTYPE html>
<html>
<head>
	<title>Test: Image Edit</title>
	<%= asset_link("jquery.js", "jquery-ui.js", "transform.js", "application.js") %>
	<%= asset_link("editor.js", "editor.model.js", "editor.command.js") %>
	<%= asset_link("jquery-ui.css", "application.css") %>
<style type="text/css">
#main-container {
	position: relative;
	background-color: #EEE;
	width: 100%;
	overflow: hidden;
}
.page-enclosure {
	border: 1px solid gray;
	box-shadow: 0 0 5px gray;
}
.book-page {
	display:block;
	position:relative;
	overflow:hidden;
}
.book-page * {
	position: absolute;  /* book page elements are absolutely positioned by default */
}
.book-image {
	background-color:gray;
	overflow:hidden;
}
.image-button {
	position: relative;
	border: 1px none;
	border-radius: 2px;
	background-color: #D5D5D5;
	z-index: 1;
}
</style>
</head>
<body>
<%= erb :'layout/header_bar' %>

<div class="page-enclosure" style="position: relative; width: 432px; height: 432px;">
<div class="book-page" style="width: 432px; height: 432px;">
	<div class="book-image" style="width: 216px; height: 144px; top: 20px; left: 20px;" data-align="end">
		<img class="actual-image" style="position: absolute; height: 144px; width: 192px; top: 0px; left: 24px;" src="/photo/3?size=display">
	</div>
	<div class="book-image" style="width: 144px; height: 216px; top: 20px; left: 252px;" data-align="end">
		<img class="actual-image" style="position: relative; height: 192px; width: 144px; top: 24px; left: 0px;" src="/photo/5?size=display">
	</div>
<div style="position: absolute; left: 10px; top: 300px;"> Photos </div>
</div>
</div>
<script type="text/javascript">
	
	function createButtons(imageDiv) {
		var butHtml = '\
		<button class="image-button move deleteme">move</button>\
		<button class="image-button pan deleteme">pan</button>\
		<button class="image-button zoom deleteme">zoom</button>\
		<button class="image-button rotate deleteme">rotate</button>';
		$(butHtml).appendTo(imageDiv);
		var showHideEvents = {
			mouseenter: function(ev) {
				$(ev.currentTarget).find(".image-button").show();
			},
			mouseleave: function(ev) {
				$(ev.currentTarget).find(".image-button").hide();				
			}
		}
		imageDiv.bind(showHideEvents);
	}

	function setupOneButton(button, imageDiv, moveCb) {
// moveCb(moveX, moveY, ev)
		var docEvents = {
			processMove: moveCb,
			mousemove: function(ev) {
				var moveX = ev.pageX - docEvents.data.mouseStartX;
				var moveY = ev.pageY - docEvents.data.mouseStartY;
				docEvents.processMove(moveX, moveY, ev);
			},
			mouseup: function(ev) {
				console.log("mouseup");
				$(document).unbind("mousemove", docEvents.mousemove);
				$(document).unbind("mouseup", docEvents.mouseup);
			}
		};
		var buttonEvents = {
			mousedown: function(ev) {
				imageDiv.mouseleave();	// hides the buttons
				var image = imageDiv.find(".actual-image").get(0);
				var originalAngle = 0;
				var transform = imageDiv.css("transform");
				if (transform) {
					var match = transform.match(/.*rotate\(([^)]+)\)/);
					if (match && match.length == 1)
						originalAngle = parseFloat(match[1]) || 0;
				}
				docEvents.data = {
					mouseStartX: ev.pageX,
					mouseStartY:ev.pageY,
					image: $(image),
					imageTop: parseFloat(image.style.top),
					imageLeft: parseFloat(image.style.left),
					imageWidth: parseFloat(image.style.width),
					imageHeight: parseFloat(image.style.height),
					centerX: ev.pageX - 50, // BUG should be based upon center of the image
					centerY: ev.pageY,
					originalAngle: originalAngle,
					imageDiv: imageDiv,
					imageDivTop: parseFloat(imageDiv.css("top")),
					imageDivLeft: parseFloat(imageDiv.css("left")),
					imageDivWidth: parseFloat(imageDiv.css("width")),
					imageDivHeight: parseFloat(imageDiv.css("height"))
				};
				ev.preventDefault();
				$(document).bind(docEvents);
			}
		};
		button.bind(buttonEvents);		
	}

	function zoom(moveX, moveY, ev) {
		var	top = this.data.imageTop + moveY;
		var	height = this.data.imageHeight - moveY * 2;
		var	xdelta = moveY * this.data.imageWidth / this.data.imageHeight;
		var	left = this.data.imageLeft + xdelta;
		var	width = this.data.imageWidth - xdelta * 2;
			this.data.image.css({
					top: top + "px",
					left: left + "px",
					height: height + "px",
					width: width + "px"
			});
	}

	function rotate(moveX, moveY, ev) {
		// Rotate
		// compute angle, pythagora
		var b = this.data.centerY - ev.pageY;
		var a = ev.pageX - this.data.centerX;
		var c = Math.sqrt(a*a+b*b);
		var angle = Math.asin(b / c);
		if (a < 0)
			angle = Math.PI / 2 + ( Math.PI / 2 - angle);
		angle = -angle;
		this.data.imageDiv.css("transform", "rotate(" + angle + "rad)");
	}

	function pan(moveX, moveY, ev) {
		this.data.image.css("top",(this.data.imageTop + moveY) + "px");
		this.data.image.css("left",(this.data.imageLeft + moveX) + "px");
	}

	function move(moveX, moveY, ev) {
		this.data.imageDiv.css("top", (this.data.imageDivTop + moveY) + "px");
		this.data.imageDiv.css("left", (this.data.imageDivLeft + moveX) + "px");
	}

	function setupButtons(imageDiv) {
	// Draw the buttons
		imageDiv = $(imageDiv);
		createButtons(imageDiv);
		imageDiv.find(".pan").css("cursor", "all-scroll");
		imageDiv.find(".move").css("cursor", "move");
		imageDiv.find(".zoom").css("cursor", 'row-resize');
		imageDiv.find(".rotate").css("cursor", 'nw-resize');
		setupOneButton(imageDiv.find(".zoom"), imageDiv, zoom);
		setupOneButton(imageDiv.find(".rotate"), imageDiv, rotate);
		setupOneButton(imageDiv.find(".pan"), imageDiv, pan);
		setupOneButton(imageDiv.find(".move"), imageDiv, move);
	}
	$(document).ready(function() {
		$(".book-image").each(function(index, el) {
			setupButtons(el);
		});
	});
</script>

