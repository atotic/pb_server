<html>
<head>
<title>PageDesign Mockup</title>

<%= asset_link("application.css") %>
<%= asset_link("jquery.js", "application.js") %>
<%= asset_link("bootstrap") %>
<%= asset_link("application.css") %>
<%= asset_link("jquery.js", "application.js") %>
<%= asset_link("bootstrap") %>
<link href='/css/application.css' rel='stylesheet' type='text/css' />
<link href='/css/editor.css' rel='stylesheet' type='text/css' />
<script src="/js/editor.pb.js"></script>
<script src="/js/editor.gui.js"></script>
<style type="text/css">
</style>
<script type="text/javascript">
"use strict"

/*
bugfix: make all pixel positions in integers to avoid subpixel errors
*/

var IntegerArithmetic = {
	// line gets divided into segmentCount,
	// segments are forced to integer length
	// return: [segmentCount + 1] of segment terminating points
	segmentLine: function(line, segmentCount) {
		if (isNaN(segmentCount) || segmentCount == 0)
			return [];
		var rem = line % segmentCount;
		var segLength = Math.round((line - rem) / segmentCount);
		var segments = new Array(segmentCount + 1);
		segments[0] = 0;
		for (var i=1; i<= segmentCount; i++) {
			var padding = 0;
			if (rem > 0) { // pad each segment by 1 until no more extra pixels
				padding += 1;
				rem -=1;
			}
			segments[i] = segments[i-1] + segLength + padding;
		}
		return segments;
	}
}

var ResourceCache = {
	cache: {},
	put: function(id, res) {
		this.cache[id] = res;
	},
	get: function(res_url) {
		if (id in this.cache)
			return cache[id];
		throw "No such resource " + id;
	}
}

var PhotoCache = {
	cache: {},
	put: function(photo) {
		this.cache[photo.id] = photo;
	},
	get: function(id) {
		if (id in this.cache)
			return this.cache[id];
		throw "No such photo" + id;
	},
	random: function(id) {
		var props = [];
		for (var p in this.cache)
			props.push(p);
		return this.cache[props[Math.floor(Math.random() * props.length)]];
	}
}

var Photo = function(id, url, width, height) {
	this.id = id;
	this.url = url;
	this.width = width;
	this.height = height;
};

PhotoCache.put(new Photo('h1', '/img/h1.png', 723, 541));
PhotoCache.put(new Photo('h2', '/img/h2.png', 717, 538));
PhotoCache.put(new Photo('h3', '/img/h3.png', 751, 561));
PhotoCache.put(new Photo('h4', '/img/h4.png', 718, 538));
PhotoCache.put(new Photo('h5', '/img/h5.png', 710, 533));
PhotoCache.put(new Photo('h6', '/img/h6.png', 719, 534));
PhotoCache.put(new Photo('v1', '/img/v1.png', 785, 1127));
PhotoCache.put(new Photo('v2', '/img/v2.png', 483, 646));
PhotoCache.put(new Photo('v3', '/img/v3.png', 484, 650));
PhotoCache.put(new Photo('v4', '/img/v4.png', 482, 644));

var BlankPage = {
	background: {
	},
	assets: [],
	assetData: {
	},
	designId: null,
	width: 768,
	height: 512,
	hasDesign: false

}

var GenericDesign = {
	id: 'genericDesign',
	getPageLayout: function(assetData, width, height) { 	// assetData is read-only
		if (!width || width < 50) {	// Enforce minimum
			debugger;
			width = 50;
		}
		if (!height || height < 50) {
			debugger;
			height = 50;
		}
		// Generate optimum tiles
		var photoCount = AssetDataUtils.photoCount(assetData);
		var textCount = AssetDataUtils.textCount(assetData);
		var totalCount = photoCount + textCount;
		var tileCountH = Math.round(Math.sqrt(totalCount * width / height));
		var tileCountV = Math.ceil(totalCount / tileCountH);
		var widthSegments = IntegerArithmetic.segmentLine(width, tileCountH);
		var heightSegments = IntegerArithmetic.segmentLine(height, tileCountV);
//		var tileWidth = width / tileCountH;
//		var tileHeight = height / tileCountV;
		var design = [];
		for (var v=0; v < tileCountV; v++) {
			for (var h=0; h < tileCountH; h++) {
				var imgIdx = v * tileCountH + h;
				if (imgIdx >= totalCount)
					break;
				var assetData = {
					top: heightSegments[v],// v * tileHeight,
					left: widthSegments[h], //h * tileWidth,
					height: heightSegments[v+1] - heightSegments[v], //tileHeight
					width: widthSegments[h+1] - widthSegments[h] //tileWidth,
				}
				console.log(assetData);
				if (imgIdx < photoCount) {
					assetData.type = 'photo';
					design.push(assetData);
				}
				else {
					assetData.type = 'text';
					design.push(assetData);
				}
			}
		}
		return {
			design: design,
			background: {
				css: {
					backgroundColor: 'teal'
				}
			}
		}
	}
}

var GenericFrameDesign = {
	id: 'genericFrameDesign',
	getPageLayout: function(assetData, width, height) {
		var layout = GenericDesign.getPageLayout(assetData, width, height);
		var design = layout.design;
		var frameOffset = 10;
		for (var i=0; i < design.length; i++) {
			design[i].top += frameOffset;
			design[i].left += frameOffset;
			design[i].width -= frameOffset * 2;
			design[i].height -= frameOffset * 2;
		}
		return layout;
	},
}

var Book = {
	designs: {
		genericDesign: GenericDesign,
		genericFrameDesign: GenericFrameDesign
	},
	designById: function(id) {
		if (id in this.designs)
			return this.designs[id];
		throw "No such design:" + id;
	}
}


var AssetDataUtils = {
	genericCount: function(assetData, type) {
		var c = 0;
		for (var p in assetData)
			if (assetData[p].type === type)
				c++;
		return c;
	},
	photoCount: function(assetData) {
		return this.genericCount(assetData, 'photo');
	},
	textCount: function(assetData) {
		return this.genericCount(assetData, 'text');
	}
}
var BookPage = function(book, bookPage) {
	this.book = book;
	this.data = bookPage;
};

BookPage.prototype = {
	get p() {
		return this.data;
	},
	get width() {
		return this.p.width;
	},
	get height() {
		return this.p.height;
	},
	addAsset: function(id, assetData) {
		this.p.assets.push(id);
		this.p.assetData[id] = assetData;
		this.p.hasDesign = false;
	},
	addPhoto: function(id) {
		var data = {
			type: 'photo',
			photoId: id
		};
		this.addAsset(PB.randomString(6), data);
	},
	addText: function() {
	},
	setDesign: function(designId) {
		this.p.designId = designId;
		this.hasDesign = false;
	},
	enclosingDom: function(options) {
		return $(document.createElement('div'))
				.addClass('designPage')
				.css({
					width: this.width,
					height: this.height
				});
	},
	layoutFromDesign: function() {
		this.hasDesign = false;
		if (!this.p.designId)
			return;
		var design = this.book.designById(this.p.designId);
		var layout =  design.getPageLayout(this.p.assetData, this.width, this.height);
		var designData = layout.design;
		for (var i=0; i<this.p.assets.length; i++) {
			var dd = designData.shift();
			var assetData = this.p.assetData[this.p.assets[i]];
			var photo = PhotoCache.get(assetData.photoId)
			var photoRect = new GUI.Rect(photo);
			var scale = photoRect.fillInside(dd);
			photoRect = photoRect.scaleBy(scale).centerIn(dd).round();
			$.extend(this.p.assetData[this.p.assets[i]],{
				type: 'photo',
				top: dd.top,
				left: dd.left,
				width: dd.width,
				height: dd.height,
				photoRect: {
					top: photoRect.top,
					left: photoRect.left,
					width: photoRect.width,
					height: photoRect.height
				}
			});
		}
		if (layout.background)
			this.p.background = PB.clone(layout.background);
		this.p.hasDesign = true;
	},
	/*
	photoAsset JSON{
		type: 'photo'
		top
		left
		width
		height
		photoId
		photoRect { tlwh }
		frameId
		frameOffset { tlwh }
	}
	photoDom {
		div.design-photo top: left: width: height	// photo with frame
			div.design-photo-frame top: 0, left: 0, width: height:
			div.design-photo-inner top: left: width: height: // photo enclosure, no overflow, position absolute
				img.design-photo-img top: left: width: height: // just photo
	}
	*/
	generatePhotoDom: function(photoAsset, options) {
		var designPhoto = $(document.createElement('div'))
			.addClass('design-photo')
			.css({
				top: photoAsset.top,
				left: photoAsset.left,
				width: photoAsset.width,
				height: photoAsset.height
			});
		// overlapFudge hack grows images by .5 of a pixel
		// without it, there could be a small gap between adjacent images
		var overlapFudge = 0;
		var designPhotoInner = $(document.createElement('div'))
			.addClass('design-photo-inner')
			.css({
				top: 0,
				left: 0,
				width: photoAsset.width + overlapFudge,
				height: photoAsset.height + overlapFudge
			});
		var img = $(document.createElement('img'))
			.addClass('design-photo-img')
			.prop('src', PhotoCache.get(photoAsset.photoId).url)
			.css({
				top: photoAsset.photoRect.top,
				left: photoAsset.photoRect.left,
				width: photoAsset.photoRect.width + overlapFudge,
				height: photoAsset.photoRect.height + overlapFudge
			});
		designPhoto.append(designPhotoInner.append(img));
		return designPhoto;
	},
/*
.design-book-page-left
	.design-page, css transform(scale), width, height
		.design-photo
*/
	generateDom: function(options) {
		options = $.extend({
			sync: false,	//
			editable: false
		}, options);
		var encloseDom = this.enclosingDom(options);
		if (this.p.hasDesign)
		{	// layout all parts of the page
			var p = this.p;
			if (p.background) {
				encloseDom.css(p.background.css);
			}
			for (var i=0; i < p.assets.length; i++) {
				var item = p.assetData[p.assets[i]];
				var itemDom;
				switch(item.type) {
					case 'photo':
						itemDom = this.generatePhotoDom(item, options);
						break;
					default:
						debugger;
				}
				encloseDom.append(itemDom);
			}
		}
		else
			encloseDom.text("Design not available." + this.p.assets.length + " items on this page");
		return encloseDom;
	}
}

var currentPage = new BookPage(Book, BlankPage);
var Util = {
	showPage: function() {
		var dom = currentPage.generateDom();
		$('.design-book-page-left').children().remove();
		$('.design-book-page-left').append(dom);
	},
	addPhoto: function() {
		var	photoUrls = ["h1.png", "h2.png", "h3.png", "h4.png", "h5.png", "h6.png", "v1.png", "v2.png", "v3.png", "v4.png"];
		var url = '/img/' + photoUrls[Math.floor(Math.random() * photoUrls.length)];
		currentPage.addPhoto(PhotoCache.random().id);
		currentPage.layoutFromDesign();
		this.showPage();
	},
	setDesign: function(designId) {
		currentPage.setDesign(designId);
		currentPage.layoutFromDesign();
		this.showPage();
	}
}
$(document).ready(function() {
	Util.showPage();
});
</script>
<body>
	<button onclick="Util.addPhoto()">Add photo</button>
	<button onclick="Util.removePhoto()">Remove photo</button>
	<button onclick="Util.addText()">Add text</button>
	<button onclick="Util.setDesign('genericDesign')">Set generic design</button>
	<button onclick="Util.setDesign('genericFrameDesign')">Set generic frame design</button>

<div class='design-book-page-left'>
</div>
</body>
