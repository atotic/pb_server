<!DOCTYPE html>
<html>
<head>
	<title>Mockup</title>
	<%= asset_link("jquery.js", "transform.js" ) %>
	<%= asset_link("bootstrap") %>

<style type='text/less' title='inline'>
/* bootstrap tweaks */
.navbar {
	margin-bottom: 0px;
}
html, body {
	height: 100%;
	width: 100%;
}
/* draw a line under navigation bar to make it look like big tabs */
.nav-tabs {
	border-bottom: 0px solid #DDDDDD;
}
.navbar {
	border-bottom: 1px solid #DDDDDD;
}

.no-selection {
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-o-user-select: none;
	user-select: none;
}

.hidden {
	position:relative;
	top: -500px;
	left: -500px;
}
#pb {
	position:relative;
	height: 100%;
	min-height: 100%;
	background-color: red;
}

#toolmenu {
	position: absolute;
	display: none;
	top: 8px;
	left: 8px;
}

@navbar-height: 41px;
@image-height: 128px;
@image-padding: 12px;
@photo-list-height: @image-height + @image-padding;
@palette-height: @navbar-height + @photo-list-height;

@arrow-width: 28px;

#pb-palette {
	position: absolute;
	top: 0;
	height: @palette-height;
	width: 100%;
	background-color:#2C2C2C;
}

.pb-palette-container {
	overflow: auto;
	margin-left:16px;
	top: @navbar-height;
	max-height: @photo-list-height;	
}
#photo-list-container {
	.pb-palette-container;
}
	#photo-list-navigator {
		display: none;
		position: absolute;
		left: 0px;
		top: 50px;
		width: 28px;
		height: 50px;
	}

	#photo-list {
		margin-top: 8px;
		width: 100%;
	}
		#photo-list img {
			margin: 2px;
		}
	#photo-list-up-cmd:hover, #photo-list-down-cmd:hover, #photo-list-center-cmd:hover {
		background-image: url("../img/glyphicons-halflings-white.png");
	}
#background-list-container {
	.pb-palette-container;
}
#layout-list-container {
	.pb-palette-container;
}
#gadget-list-container {
	.pb-palette-container;
}

#pb-work-area {
	height: 100%;
	padding-top: @palette-height;
	overflow: auto;
	background-color: #DDD;
	-moz-box-sizing: padding-box;
	box-sizing: border-box;
}
	#work-area-back {
		position: absolute;
		width: @arrow-width;
		height:46px;
		top: (@palette-height - 46) / 2;
		left: 0px;
		background: url('/img/arrows.png') -28px 2px;
	}
	#work-area-back:hover {
		background:  url('/img/arrows.png') 0 0, url('/img/arrows.png') -28px 2px;	
	}
	#work-area-forward {
		position: absolute;
		width: @arrow-width;
		height:46px;
		top: (@palette-height - 46) / 2;
		right:-1px;
		background: url('/img/arrows.png') -85px 2px;
	}
	#work-area-forward:hover {
		background:  url('/img/arrows.png') -57px 0, url('/img/arrows.png') -85px 2px;	
	}


	#work-area-rough {
		margin: 24px 16px 4px 24px;
	}

@rough-size: 128px;
@rough-border: 2px solid white;
@rough-border-fade: 1px solid #DDD;

	.rough-page {
		position: relative;
		display: inline-block;
		width: @rough-size;
		height: @rough-size;
		border: 1px solid black;
		.no-selection;
	}
		.rough-page p {
			position: absolute;
			text-align: center;
			width: 100%;
			bottom: -10px;
			color: #999 ;
		}
		.left-rough {
			border: @rough-border;
			border-right: @rough-border-fade;
			margin-left: 6px;
			box-shadow:-2px 0px 4px #B3B3B3;
		}

		.right-rough {
			border: @rough-border;
			border-left: @rough-border-fade;
			margin-right: 10px;
			box-shadow: 2px 0px 4px #B3B3B3;
		}
	.rough-page-cover {
		border: @rough-border;
		margin-left: 0px;
		margin-right: 0px;
	}
	.rough-page-cover-flap {
		width: @rough-size / 3;
		border: @rough-border;
		border-left: 0px none;
	}
	.rough-page-back {
		border: @rough-border;
		margin-right: 32px;
	}
	.rough-page-back-flap {
		border: @rough-border;
		border-right: 0px none;
		width: @rough-size / 3;
	}
	.rough-tile {
		position: relative;
		float: left;
		width: 30px;
		height: 30px;
		background-position: center center;
    background-repeat: no-repeat;
    background-size: 100% auto;
		background-color: none;
	}
	.drop-rough-on-rough-left {
		border-left: 10px solid yellow;
	}
	.drop-rough-on-rough-right {
		border-right: 10px solid yellow;
	}
	.drop-img-on-rough {
	}
	.drop-img-on-rough:after {
		content: "";
		position: absolute;
		width: 85%;
		height: 70%;
		top: 0;
		left: 0;
		border: 10px solid rgba(255, 0, 0, 0.5);
		border-radius: 36px; 
	}

</style>
	<script src='http://lesscss.googlecode.com/files/less-1.3.0.min.js'></script>

</head>
<body>

<div id='pb'>
	<div id='pb-work-area'>
		<div id='work-area-rough'>
			<div class='rough-page rough-page-cover' draggable='true'><p>cover</p></div><div class='rough-page rough-page-cover-flap'><p>flap</p></div>
			<div class='rough-page rough-page-back-flap'><p>flap</p></div><div class='rough-page rough-page-back'><p>back cover</p></div>
			<div class='rough-page right-rough'><p>1</p></div>
			<div class='rough-page left-rough'><p>2</p></div>
			<div class='rough-page right-rough'><p>3</p></div>
			<div class='rough-page left-rough'><p>4 </p></div>
		</div>
	</div>
	<div id='pb-palette'>
	<div class="navbar">
		<div class="navbar-inner">
			<div class="container">
				<ul class="nav">
					<li class="dropdown">
						<a class='dropdown-toggle' data-toggle='dropdown' href="#">sveg's photo
						<b class="caret icon-white"></b>
						</a>
						<ul class='dropdown-menu'>
							<li><a href="">about</a></li>
							<li><a href="/">home</a></li>
						</ul>
					</li>
					<li class='dropdown'>
						<a class='dropdown-toggle' data-toggle='dropdown' href='#'>
							Toolbox<b class="caret icon-white"></b>
						</a>
						<ul class="dropdown-menu">
			  	  	<li><a href='javascript:alert("add photo")'>Add photo</a></li>
			  	  	<li>Show
			  	  		<ul>
			  	  			<li><a href='javascript:alert("all")'>all photos</a></li>
			  	  			<li><a href='javascript:alert("unused")'>unused photos</a></li>
			  	  		</ul>
			  	  	</li>
			  	  	<li>View
			  	  		<ul>
			  	  			<li><a href='javascript:doMenu("viewBiggerImages")'>Bigger images</a></li>
			  	  			<li><a href='javascript:doMenu("viewSmallerImages")'>Smaller images</a></li>
			  	  			<li><a href='javascript:doMenu("viewMoreImages")'>More images</a></li>
			  	  			<li><a href='javascript:doMenu("viewFewerImages")'>Fewer images</a></li>
			  	  		</ul>
			  	  	</li>
			  		</ul>
			  	</li>
				</ul>
				<ul id='palette-tabs' class='nav nav-tabs'>
					<li class='active'><a data-toggle='tab' href='#photo-list-container'>Your photos</a></li>
					<li><a data-toggle='tab' href='#background-list-container'>Backgrounds</a></li>
					<li><a data-toggle='tab' href='#layout-list-container'>Layouts</a></li>
					<li><a data-toggle='tab' href='#gadget-list-container'>Gadgets</a></li>
				</ul>
				<ul class="nav pull-right">
<% if current_user %>
					<li class='dropdown'>
						<a class='dropdown-toggle' data-toggle='dropdown' href='#'>
							<%= current_user.display_name %><b class="caret"></b></a>
						<ul class='dropdown-menu'>
							<li><a href="/account">account</a>
							<li><a href="/logout">log out</a>
<% if current_user.is_administrator %>
							<li><a href="/admin" class="admin">admin</a>
<% end %>
						</ul>
					</li>
<% else %>
					<li><a href="/auth/login">log in</a>			
<% end %>
				</ul>
		</div>
	</div>
</div>

		<div id='toolmenu' class="btn-group">
  		<a class="btn dropdown-toggle" data-toggle="dropdown" href="#"><i class='icon-wrench'></i><span class="caret"></span></a>
	  	<ul class="dropdown-menu">
  	  	<li><a href='javascript:alert("add photo")'>Add photo</a>
  	  	<li>Show
  	  		<ul>
  	  			<li><a href='javascript:alert("all")'>all photos</a>
  	  			<li><a href='javascript:alert("unused")'>unused photos</a>
  	  		</ul>
  		</ul>
		</div>
		<div id='palette-tabs-container' class='tab-content'>
			<div class="tab-pane active"  id='photo-list-container'>
				<div id='photo-list-navigator'>
					<a id='photo-list-up-cmd' class='icon-arrow-up'></a><br>
					<a id='photo-list-center-cmd' class='icon-ok-circle'></a><br>
					<a id='photo-list-down-cmd'class='icon-arrow-down'></a><br>
				</div>
				<div id='photo-list'>
				</div>
			</div>

			<div class="tab-pane" id='background-list-container'>
				Backgrounds!
			</div>
			<div class="tab-pane"  id='layout-list-container'>
				Layouts!
			</div>
			<div class="tab-pane" id='gadget-list-container'>
				Gadgets!
			</div>
		</div>
	</div>

</div>
<script>
"use strict";

function insertImages() {
	function resetWidth() {
		var allWidths = $('#photo-list').children().map(function(i, el) { return $(el).width()}).get();
		for (var i =0; i< allWidths.length; i++) // images not loaded yet
			if (allWidths[i] == 0) {
				window.setTimeout(resetWidth, 200);
				return;
			}
		var total = allWidths.reduce( function(prev, cur) { return prev+cur}, 0);
		$('#photo-list').width(total + 20);
	}
	var html ="";
	for (var i=0; i<200; i++)
		html += "<img src='/assets/test/" + i + ".jpg?size=icon'>"
	$('#photo-list').append(html);
	//resetWidth();
}

function makeDraggable() {
	// dragging rough pages
	$('.rough-page').prop('draggable', true).on( {
		'dragstart': function(ev) {
			ev = ev.originalEvent;
			ev.dataTransfer.setData('text/plain', "my text");
			DragStore.start().roughPage = this;
			// TODO hide the page, create drag image from canvas
//			ev.dataTransfer.setDragImage(clone, 0, 0);
			ev.dataTransfer.effectAllowed = "move";
		},
		'dragend': function(ev) {
			DragStore.clear();
		}
	});
	// dragging photos out of photo-list
	$('#photo-list img').prop('draggable', true).on( {
		'dragstart': function(ev) {
			ev = ev.originalEvent;
			ev.dataTransfer.setData('text/uri-list', this.src);
			DragStore.start().image = this;
			ev.effectAllowed = 'move';
		},
		'dragend': function(ev) {
			DragStore.clear();
		}
	});
}

(function(window) {
	var baseImageHeight = 128;
	var imagePadding = 12;
	var navbarHeight = 41;
	var imageHeight = baseImageHeight;
	var imageHeightScaler = 1.1;
	var shortcuts = null;

	var Wimp = {
		// Grow photo-list-container
		setContainerHeight: function(height, animate) {
			var paletteHeight = navbarHeight + height;
			var newProps = [
				['#palette-tabs-container .tab-pane', 'max-height', height],
				['#pb-palette', 'height', paletteHeight],
				['#pb-work-area', 'padding-top', paletteHeight]
			]
			newProps.forEach(function(arry) {
				if (animate) {
					var o = {};
					o[arry[1]] = arry[2];
					$(arry[0]).animate(o, 100);
				}
				else
					$(arry[0]).css(arry[1], arry[2]);
			});
		},
		setImageHeight: function(height) {
			var scale = height / imageHeight;
			$('#photo-list-container img').each(function() {
				var el = $(this);
				var nh = Math.floor(el.height() * scale);
				var nw = Math.floor(el.width() * scale);
				el.css('height', nh);
				el.css('width', nw);
			});
			imageHeight = height;
			// find the smallest size that encloses images
		},
		viewMoreImages: function() {
			var nextSize = $('#photo-list-container').height() + imageHeight;
			var maxSize = $('body').height() - 200;
			if (nextSize < maxSize)
				this.setContainerHeight(nextSize, true);
		},
		viewFewerImages: function() {
			var nextSize = $('#photo-list-container').height() - imageHeight;
			if (nextSize > imageHeight)
				this.setContainerHeight(nextSize, true);
		},
		viewBiggerImages: function() {
			var nextSize = Math.floor(imageHeight * imageHeightScaler);
			if (nextSize < 256)
				this.setImageHeight(nextSize);
		},
		viewSmallerImages: function() {
			var nextSize = Math.floor(imageHeight / imageHeightScaler);
			if (nextSize > baseImageHeight / 2)
				this.setImageHeight(nextSize);
		},
		addShortcut: function(key, action, modifiers) {
			if (shortcuts == null) {
				$('body').keydown( function(ev) {

				});
			}
		}
	};
	window.Wimp = Wimp;
})(window);

function doMenu(cmd ) {
	switch(cmd) {
		case 'viewBiggerImages':
			Wimp.viewBiggerImages();
		break;
		case 'viewSmallerImages':
			Wimp.viewSmallerImages();
		break;
		case 'viewMoreImages':
			Wimp.viewMoreImages();
		break;
		case 'viewFewerImages':
			Wimp.viewFewerImages();
		break;
		default:
			console.error('unknown menu command ' + cmd);
	}
}


function makeDroppable() {
	// dropping rough pages on page
	// dropping images on rough pages
	var roughPageTarget = { target: null, direction: 0, dropFeedback: "" };

	function setTarget(target, direction, dropFeedback) {
		if (roughPageTarget.target == target && roughPageTarget.direction == direction)
			return;
		if (roughPageTarget.target) {
			$(roughPageTarget.target).removeClass(roughPageTarget.dropFeedback);
		}
		roughPageTarget = { target: target, direction: direction, dropFeedback: dropFeedback }
		if (target)
			$(target).addClass(dropFeedback);
	}

	function tileRoughInsideTiles(roughDiv) {
		roughDiv = $(roughDiv);
		var tiles = roughDiv.children('.rough-tile');
		var totalWidth = roughDiv.width();
		var totalHeight = roughDiv.height() - roughDiv.children('p').height();
		var tileCount = tiles.length;
		// Perfect fit edge length
		var edgeLength = Math.floor(Math.sqrt(totalWidth * totalHeight / tileCount));
		// shrink the edge until all tiles fit
		// Number of tiles that fits: floor(width / edge) * floor(height / edge)
		while (edgeLength > 8 
			&& (Math.floor(totalWidth / edgeLength) * Math.floor(totalHeight / edgeLength)) < tileCount)
			edgeLength -= 1;
		tiles.animate({height: edgeLength + 'px', width: edgeLength + 'px'});
	}

	$('#work-area-rough').prop('dropzone', true).on( {
		'dragover': function(ev) {
			ev = ev.originalEvent;
			// Ignore unless drag has the right flavor
			if (!(DragStore.roughPage || DragStore.image))
				return;
			ev.preventDefault();

			// Find the current drop location
			var newTarget = null;
			var newDirection = null;
			$(this).children('.rough-page').each(function() {
				var direction = GUtil.pointInClientRect(ev.pageX, ev.pageY, 
					this.getBoundingClientRect());
				if (direction) {
					newTarget = this;
					newDirection = direction;
				}
			});
			// Display visual feedback
			if (DragStore.roughPage) {
				if (newTarget && newTarget != DragStore.roughPage)
					setTarget(newTarget, newDirection, 'drop-rough-on-rough-' + newDirection);
				else
					setTarget();
			}
			else if (DragStore.image) {
				if (newTarget) 
					setTarget(newTarget, null, 'drop-img-on-rough');
				else 
					setTarget();
			}
		},
		drop: function(ev) {
			ev = ev.originalEvent;
			ev.preventDefault();
			if (!roughPageTarget.target)
				return;
			var t = roughPageTarget;
			setTarget();	// reset the drag visuals
			if (DragStore.roughPage) {
				var src = $(DragStore.roughPage);
				src.hide(100, function() {
					src.detach();
					if (t.direction == 'left')
						$(t.target).before(src);
					else
						$(t.target).after(src);
					$(src).show(100);
	
				});
			}
			else if (DragStore.image) {
				var src = $(DragStore.image);
				var newImg = $("<div class='rough-tile'/>");
				newImg.css('background-image', 'url("' + src.prop('src') + '")');
				newImg.appendTo(t.target);
				tileRoughInsideTiles(t.target);
			}
		}
	})
}

// Utilities
(function(window) {
	var GUtil = {
		// false not in rect, 'left' to the left, 'right' to the right
		pointInClientRect: function(x, y, r) {
			var inRect = y >= r.top && y <= r.bottom && x >= r.left && x <= r.right;
			if (inRect) {
				var midpoint = r.left + (r.right - r.left) / 2;
//				console.log(x, ' mid ', midpoint,  x < midpoint ? 'left' : 'right');
				return x < midpoint ? 'left' : 'right';
			}
			else
				return false;
		}
	}
	window.GUtil = GUtil;
})(window);

// DragStore is a global used to store dragged local data
// Why? Html drag can only drag strings, we need js objects
// Drag types are not available dragover callback
(function(window) {
	var DragStore = {
		start: function() {
			this._roughPage = null;
			return this;
		},
		clear: function() {
			var dropClasses = [
				'drop-rough-on-rough-right',
				'drop-rough-on-rough-left',
				'drop-img-on-rough'
			];
			dropClasses.forEach(function(c) { $('.' + c).removeClass(c)});
			this.start();
		},
		get roughPage() {return this._roughPage},
		set roughPage(val) { this._roughPage = val},
		get image() { return this._image},
		set image(val) { this._image = val}
	}
	window.DragStore = DragStore;
})(window);

/* PhotoScroller scrolls #photo-list vertically
 Usage: 
new PhotoScroller( $('#photo-list-up-cmd'),
		document.getElementById('photo-list-container'), 
		document.getElementById('photo-list'),
		'up'));
*/
(function(window) {
	function PhotoScroller(button, container, list, direction) {
		this.button = button;
		this.container = container;
		this.photoList = list;
		this.direction = direction;
		this.done = true;
		this.fast = false;
		this.bind();
	};

	PhotoScroller.prototype = {
		start: function() {
			$(this.container).clearQueue();
			this.done = false;
			this.perform();
		},
		stop: function() {
			$(this.container).clearQueue();
			this.done = true;
			this.fast = false;
		},
		speedUp: function() {
			this.fast = true;
		},
		slowDown: function() {
			this.fast = false;
		},
		perform: function() {
			if (this.done)
				return;
			var nextPhotoEdge = this.findNextEdge();
			if (nextPhotoEdge == -1)
				return;
			var THIS = this;
			var distance  = Math.abs(this.container.scrollTop - nextPhotoEdge);
			var timing = this.fast ? distance * 2 : distance * 5;
		//	this.container.scrollTop = nextPhotoEdge;
			$(this.container).animate( {scrollTop: nextPhotoEdge}, 
					timing, this.fast ?  'swing' : 'linear',
					function() {
						window.setTimeout(function() {THIS.perform()}, timing);
					}
			);
		},
		between: function(num, low, high) {
			return num > low && num <= high;
		},
		scrollToCenterLocation: function(img) {
			return img.offsetTop + img.offsetHeight - this.container.offsetHeight + 4;
		},
		findNextEdge: function() {
			var visTop = this.container.scrollTop;
			var visBottom = this.container.offsetHeight + visTop;
			var photos = $(this.photoList).children().get();
			var targetPhoto = null;
			var targetScore = 0;
			for (var i=0, done = false; i < photos.length && !done; i++) {
				var imgTop = photos[i].offsetTop;
				var imgBottom = photos[i].offsetHeight + imgTop;
				switch(this.direction) {
					case 'up': // find first element whose bottom is not visible
						if (imgBottom > visBottom) {
							targetPhoto = photos[i];
							done = true;
						}
						break;
					case 'down': // find last element whose top is not visible
						if (imgTop < visTop)
							targetPhoto = photos[i];
						if (imgBottom > visTop)
							done = true;
						break;
					case 'center': // find largest partially occluded element
						var score = 0;
						if (this.between(imgBottom, visTop, visBottom)) {
							score = imgBottom - visTop;
							if (this.between(imgTop, visTop, visBottom))
								score -= imgTop - visTop;
						}
						else if (this.between(imgTop, visTop, visBottom))
							score = visBottom - imgTop;
						if (score > targetScore) {
							targetPhoto = photos[i];
							targetScore = score;
						}
						if (imgTop > visTop)
							done = true;
						break;
				}
			}
			if (targetPhoto)
				return this.scrollToCenterLocation(targetPhoto);
			else
				return -1;
		},
		bind: function() {
			$(this.button).on({
				'mouseenter': function(ev) {
					ev.data.start();
				},
				'mouseleave': function(ev) {
						ev.data.stop();
				},
				'mousedown': function(ev) {
						ev.data.speedUp();
				},
				'mouseup': function(ev) {
						ev.data.slowDown();
				}
				}, this);
		}
	};

	window.PhotoScroller = PhotoScroller;
})(this);

var scrollers = new Array;
['up', 'down', 'center'].forEach(function(dir) {
	scrollers.push(new PhotoScroller(
		$('#photo-list-' + dir + '-cmd'),
		document.getElementById('photo-list-container'), 
		document.getElementById('photo-list'),
		dir));
});

insertImages();
makeDraggable();
makeDroppable();
</script>
</body>