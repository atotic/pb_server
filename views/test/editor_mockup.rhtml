<!DOCTYPE html>
<html>
<head>
	<title>Mockup</title>
	<%= asset_link("jquery.js", "transform.js" ) %>
	<%= asset_link("bootstrap") %>

<style type='text/less' title='inline'>
/* bootstrap tweaks */
.navbar {
	margin-bottom: 0px;
}
html, body {
	height: 100%;
	width: 100%;
}
/* draw a line under navigation bar to make it look like big tabs */
.nav-tabs {
	border-bottom: 0px solid #DDDDDD;
}
.navbar {
	border-bottom: 1px solid #DDDDDD;
}

.no-selection {
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-o-user-select: none;
	user-select: none;
}

.hidden {
	position:relative;
	top: -500px;
	left: -500px;
}
#pb {
	position:relative;
	height: 100%;
	min-height: 100%;
	background-color: red;
}

#toolmenu {
	position: absolute;
	display: none;
	top: 8px;
	left: 8px;
}

@navbar-height: 41px;
@image-height: 128px;
@image-padding: 12px;
@photo-list-height: @image-height + @image-padding;
@palette-height: @navbar-height + @photo-list-height;
@side-tool-width: 120px;
@arrow-width: 28px;

@dark-bg-color: #2C2C2C;

#pb-palette {
	position: absolute;
	top: 0;
	height: @palette-height;
	width: 100%;
	background-color:@dark-bg-color;
}


.pb-palette-container {
	overflow: auto;
	margin-left:16px;
	top: @navbar-height;
	max-height: @photo-list-height;
}
#photo-list-container {
	.pb-palette-container;
}

	#photo-list {
		margin-top: 8px;
		width: 100%;
	}
		#photo-list img {
			margin: 2px;
		}

#background-list-container {
	.pb-palette-container;
}
#layout-list-container {
	.pb-palette-container;
}
#gadget-list-container {
	.pb-palette-container;
}

#pb-work-area {
	height: 100%;
	padding-top: @palette-height;
	overflow: auto;
	background-color: #DDD;
	-moz-box-sizing: padding-box;
	box-sizing: border-box;
}
	#work-area-back {
		position: absolute;
		width: @arrow-width;
		height:46px;
		top: (@palette-height - 46) / 2;
		left: 0px;
		background: url('/img/arrows.png') -28px 2px;
	}
	#work-area-back:hover {
		background:  url('/img/arrows.png') 0 0, url('/img/arrows.png') -28px 2px;
	}
	#work-area-forward {
		position: absolute;
		width: @arrow-width;
		height:46px;
		top: (@palette-height - 46) / 2;
		right:-1px;
		background: url('/img/arrows.png') -85px 2px;
	}
	#work-area-forward:hover {
		background:  url('/img/arrows.png') -57px 0, url('/img/arrows.png') -85px 2px;
	}

	#work-area-tools {
		position:fixed;
		left: 0;
		top: 0;
		padding: 8px;
		padding-top: @palette-height;
		margin-top: 24px;
		width: @side-tool-width;
		height: 100%;
		background-color: @dark-bg-color;
	}
	#work-area-tools > .btn {
		width:80%;
		text-align: left;
	}

	#work-area-organize {
		margin: 24px 16px 4px @side-tool-width + 24px;
	}

@rough-size: 128px;
@rough-border: 2px solid white;
@rough-border-fade: 1px solid #DDD;

	.rough-page {
		position: relative;
		display: inline-block;
		width: @rough-size;
		height: @rough-size;
		border: 1px solid black;
		.no-selection;
	}
		.rough-page p {
			position: absolute;
			text-align: center;
			width: 100%;
			bottom: -10px;
			color: #999 ;
		}
		.left-rough {
			border: @rough-border;
			border-right: @rough-border-fade;
			margin-left: 6px;
			box-shadow:-2px 0px 4px #B3B3B3;
		}

		.right-rough {
			border: @rough-border;
			border-left: @rough-border-fade;
			margin-right: 10px;
			box-shadow: 2px 0px 4px #B3B3B3;
		}
	.rough-page-cover {
		border: @rough-border;
		margin-left: 0px;
		margin-right: 0px;
	}
	.rough-page-cover-flap {
		width: @rough-size / 3;
		border: @rough-border;
		border-left: 0px none;
	}
	.rough-page-back {
		border: @rough-border;
		margin-right: 32px;
	}
	.rough-page-back-flap {
		border: @rough-border;
		border-right: 0px none;
		width: @rough-size / 3;
	}
	.rough-tile {
		position: relative;
		float: left;
		width: 30px;
		height: 30px;
		background-position: center center;
    background-repeat: no-repeat;
    background-size: 100% auto;
		background-color: none;
	}
	.drop-target {
		position:relative;
	}
	.drop-target:after {
		box-sizing: border-box;
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		bottom:0;
		right:0;
		box-shadow: inset 0 0 20px red;
	}
	.drop-target-btn {
	}
	.drop-target-btn:after {
		content: "";

	}
</style>
	<script src='http://lesscss.googlecode.com/files/less-1.3.0.min.js'></script>

</head>
<body>

<div id='pb'>
	<div id='pb-work-area'>
		<div id='work-area-tools'>
			<div id='add-page-btn' class='btn' rel="tooltip" title="Drag and drop the button to insert pages in the middle"><i class='icon-plus-sign'></i> Add page</div>
			<div id='remove-page-btn' class='btn' rel='tooltip' title='Drag anything over this button to remove it'><i class='icon-minus-sign'></i> Remove </div>
		</div>
		<div id='work-area-organize'>
			<div class='rough-page rough-page-cover' draggable='true'><p>cover</p></div><div class='rough-page rough-page-cover-flap'><p>flap</p></div>
			<div class='rough-page rough-page-back-flap'><p>flap</p></div><div class='rough-page rough-page-back'><p>back cover</p></div>
			<div class='rough-page right-rough'><p>1</p></div>
			<div class='rough-page left-rough'><p>2</p></div>
			<div class='rough-page right-rough'><p>3</p></div>
			<div class='rough-page left-rough'><p>4 </p></div>
		</div>
	</div>
	<div id='pb-palette'>
	<div class="navbar">
		<div class="navbar-inner">
			<div class="container">
				<ul class="nav">
					<li class="dropdown">
						<a class='dropdown-toggle' data-toggle='dropdown' href="#">sveg's photo
							<b class="caret icon-white"></b>
						</a>
						<ul class='dropdown-menu'>
							<li><a href="">about</a></li>
							<li><a href="/">home</a></li>
						</ul>
					</li>
					<li class='dropdown'>
						<a class='dropdown-toggle' data-toggle='dropdown' href='#'>
							Toolbox<b class="caret icon-white"></b>
						</a>
						<ul class="dropdown-menu">
			  	  	<li><a href='javascript:alert("add photo")'>Add photo</a></li>
			  	  	<li>Show
			  	  		<ul>
			  	  			<li><a href='javascript:alert("all")'>all photos</a></li>
			  	  			<li><a href='javascript:alert("unused")'>unused photos</a></li>
			  	  		</ul>
			  	  	</li>
			  	  	<li>View
			  	  		<ul>
			  	  			<li><a href='javascript:WimpShortcut.doCommand("viewBiggerImages")'>Bigger images</a></li>
			  	  			<li><a href='javascript:WimpShortcut.doCommand("viewSmallerImages")'>Smaller images</a></li>
			  	  			<li><a href='javascript:WimpShortcut.doCommand("viewMoreImages")'>More images</a></li>
			  	  			<li><a href='javascript:WimpShortcut.doCommand("viewFewerImages")'>Fewer images</a></li>
			  	  		</ul>
			  	  	</li>
			  		</ul>
			  	</li>
				</ul>
				<ul id='palette-tabs' class='nav nav-tabs'>
					<li class='active'><a data-toggle='tab' href='#photo-list-container'>Your photos</a></li>
					<li><a data-toggle='tab' href='#background-list-container'>Backgrounds</a></li>
					<li><a data-toggle='tab' href='#layout-list-container'>Layouts</a></li>
					<li><a data-toggle='tab' href='#gadget-list-container'>Gadgets</a></li>
				</ul>
				<ul class="nav pull-right">
<% if current_user %>
					<li class='dropdown'>
						<a class='dropdown-toggle' data-toggle='dropdown' href='#'>
							<%= current_user.display_name %><b class="caret"></b></a>
						<ul class='dropdown-menu'>
							<li><a href="/account">account</a>
							<li><a href="/logout">log out</a>
<% if current_user.is_administrator %>
							<li><a href="/admin" class="admin">admin</a>
<% end %>
						</ul>
					</li>
<% else %>
					<li><a href="/auth/login">log in</a>
<% end %>
				</ul>
		</div>
	</div>
</div>

		<div id='toolmenu' class="btn-group">
  		<a class="btn dropdown-toggle" data-toggle="dropdown" href="#"><i class='icon-wrench'></i><span class="caret"></span></a>
	  	<ul class="dropdown-menu">
  	  	<li><a href='javascript:alert("add photo")'>Add photo</a>
  	  	<li>Show
  	  		<ul>
  	  			<li><a href='javascript:alert("all")'>all photos</a>
  	  			<li><a href='javascript:alert("unused")'>unused photos</a>
  	  		</ul>
  		</ul>
		</div>
		<div id='palette-tabs-container' class='tab-content'>
			<div class="tab-pane active"  id='photo-list-container'>
				<div id='photo-list'>
				</div>
			</div>

			<div class="tab-pane" id='background-list-container'>
				Backgrounds!
			</div>
			<div class="tab-pane"  id='layout-list-container'>
				Layouts!
			</div>
			<div class="tab-pane" id='gadget-list-container'>
				Gadgets!
			</div>
		</div>

	</div>
</div>
<script>
"use strict";

function insertImages() {
	function resetWidth() {
		var allWidths = $('#photo-list').children().map(function(i, el) { return $(el).width()}).get();
		for (var i =0; i< allWidths.length; i++) // images not loaded yet
			if (allWidths[i] == 0) {
				window.setTimeout(resetWidth, 200);
				return;
			}
		var total = allWidths.reduce( function(prev, cur) { return prev+cur}, 0);
		$('#photo-list').width(total + 20);
	}
	var html ="";
	for (var i=0; i<200; i++)
		html += "<img src='/assets/test/" + i + ".jpg?size=icon'>"
	$('#photo-list').append(html);
	//resetWidth();
}

function makeDraggable() {
	// dragging rough pages
	// dragging photos out of photo-list
	$('#photo-list img').prop('draggable', true).on( {
		'dragstart': function(ev) {
			ev = ev.originalEvent;
			ev.dataTransfer.setData('text/uri-list', this.src);
//			console.log("DragStore.start photo-list img");
			DragStore.start().image = this;
			ev.effectAllowed = 'move';
		},
		'dragend': function(ev) {
//			console.log("DragStore.clear photo-list img");
			DragStore.clear();
		}
	});
}

(function(window) {
	var WimpShortcut = function(name, key, meta, callback) {
		this.name = name;
		this.key = key;
		this.meta = meta;
		this.callback = callback;
	};

	var shortcuts = null;	// hash of shortcuts
	var commands = {};

	$.extend(WimpShortcut, {
		hashString: function(rawKey, meta) {
			if (!rawKey)
				return 0;
			var key = rawKey;
			if (typeof key != 'string') {
				switch(key) {
					case 8800: key = '='; break;	// Mac option key randomness
					case 8211: key = '-'; break;
					default: key = String.fromCharCode(rawKey);
				}
			}
			var s = meta ? 'meta-' : '';
			s += key.toLowerCase();
			return s;
		},
		add: function(shortcut) {
			if (shortcuts == null) {
				$('body').keypress( function(ev) {
					ev = ev.originalEvent;
					if (ev.repeat)
						return;
					var key = ev.char || ev.charCode || ev.which;
					var s = WimpShortcut.hashString(key, ev.altKey);	// TODO revise for windows
	//				console.log('shortcut: ', s);
					if (shortcuts[s])
						shortcuts[s].callback();
				});
				shortcuts = {};
			}
			if (shortcut.key)
				shortcuts[WimpShortcut.hashString(shortcut.key, shortcut.meta)] = shortcut;
			if (shortcut.name)
				commands[shortcut.name] = shortcut;
		},
		doCommand: function(cmd ) {
			if (commands[cmd])
				commands[cmd].callback();
			else
				console.error('unknown command ' + cmd);
		}
	});
	window.WimpShortcut = WimpShortcut;
})(window);

// Wimp is window/mouse commands manipulation
(function(window) {

	var navbarHeight = 41; // @navbar-height in less
	// Image palette variables
	var baseImageHeight = 128; 	// @image-height
	var imagePadding = 12;			// @image-padding
	var imageHeight = baseImageHeight;
	var imageHeightScaler = 1.1;

	var Wimp = {

		// Grow photo-list-container
		setContainerHeight: function(height, animate) {
			var paletteHeight = navbarHeight + height;
			var newProps = [
				['#palette-tabs-container .tab-pane', 'max-height', height],
				['#pb-palette', 'height', paletteHeight],
				['#pb-work-area', 'padding-top', paletteHeight],
				['#work-area-tools', 'padding-top', paletteHeight]
			]
			newProps.forEach(function(arry) {
				if (animate) {
					var o = {};
					o[arry[1]] = arry[2];
					$(arry[0]).animate(o, 100);
				}
				else
					$(arry[0]).css(arry[1], arry[2]);
			});
		},
		setImageHeight: function(height) {
			var scale = height / imageHeight;
			$('#photo-list-container img').each(function() {
				var el = $(this);
				el.stop();
				var nh = el.height() * scale;
				var nw = el.width() * scale;
				el.css('height', nh);
				el.css('width', nw);
			});
			imageHeight = height;
			// find the smallest size that encloses images
		},
		renumberRoughPages: function() {
			$('#work-area-organize .rough-page').each(function(idx) {
				if (idx < 4)
					return;
				var pNum = idx - 3;
				$(this).children('p').text(idx - 3);
				if (pNum % 2 == 1)
					$(this).removeClass('left-rough').addClass('right-rough');
				else
					$(this).removeClass('right-rough').addClass('left-rough');
			});
		},
		revealByScrolling: function(el, container) {
			el = $(el).get(0);
			container = $(container).get(0);
			var elTop = el.offsetTop;
			var elBottom = elTop + el.offsetHeight;
			var containerTop = container.scrollTop;
			var containerBottom = containerTop + container.offsetHeight;
			if (elTop < containerTop)
				$(container).animate({ 'scrollTop' : elTop - 4});
			else if (elBottom > containerBottom)
				$(container).animate({'scrollTop' : elBottom - container.offsetHeight});
		},
		tileRoughInsideTiles: function (roughDiv) {
			roughDiv = $(roughDiv);
			var tiles = roughDiv.children('.rough-tile');
			var totalWidth = roughDiv.width();
			var totalHeight = roughDiv.height() - roughDiv.children('p').height();
			var tileCount = tiles.length;
			// Perfect fit edge length
			var edgeLength = Math.floor(Math.sqrt(totalWidth * totalHeight / tileCount));
			// shrink the edge until all tiles fit
			// Number of tiles that fits: floor(width / edge) * floor(height / edge)
			while (edgeLength > 8
				&& (Math.floor(totalWidth / edgeLength) * Math.floor(totalHeight / edgeLength)) < tileCount)
				edgeLength -= 1;
			tiles.animate({height: edgeLength + 'px', width: edgeLength + 'px'});
		},
		getPossiblePhotoContainerHeights: function(imageHeight) {
			$('#photo-list-container').stop();
			var max = $('body').height() - 200;
			var curr = imageHeight + imagePadding;
			var all = [ curr ];
			while ((curr += imageHeight) < max)
				all.push( curr);
			return all;
		},
		viewMoreImages: function() {
			var sizes = this.getPossiblePhotoContainerHeights(imageHeight);
			var height = $('#photo-list-container').height();
			for (var i=0; i< sizes.length; i++) // find next larger size
				if (sizes[i] > height) {
					this.setContainerHeight(sizes[i], true);
					return;
				}
		},
		viewFewerImages: function() {
			var sizes = this.getPossiblePhotoContainerHeights(imageHeight);
			var height = $('#photo-list-container').height();
			for (var i=sizes.length -1; i >= 0; i--) // find previous smaller size
				if (sizes[i] < height) {
					this.setContainerHeight(sizes[i], true);
					return;
				}
		},
		viewBiggerImages: function() {
			var nextImgSize = Math.floor(imageHeight * imageHeightScaler);
			if (nextImgSize < 256) {
				this.setImageHeight(nextImgSize);
				this.viewMoreImages();
			}
		},
		viewSmallerImages: function() {
			var nextSize = Math.floor(imageHeight / imageHeightScaler);
			if (nextSize > baseImageHeight / 2) {
				this.setImageHeight(nextSize);
				this.viewFewerImages();
			}
		},
		addRoughPage: function(targetPage, direction) {
			direction = direction || 'after';
			targetPage = targetPage || $('#work-area-organize > .rough-page:last').get(0);
			var pos = 'right';
			var pageNumber = 0;
			if (targetPage && targetPage.className.match(/right/))
				pos = 'left';
			var newPage = $("<div class='rough-page " + pos +"-rough'><p>" + pageNumber + "</p></div>");
			if (targetPage) {
				if (direction == 'before')
					$(targetPage).before(newPage);
				else
					$(targetPage).after(newPage);
			}
			else {
				$('#work-area-organize').append(newPage);
			}
			// cleanup: make it look nice
			window.Dnd.RoughWorkArea.makeDraggable(newPage);
			this.revealByScrolling(newPage, $('#pb-work-area'));
			this.renumberRoughPages();
		},
		removeRoughPage: function(roughPage) {
			$(roughPage).animate({width:0}, function() {
				$(roughPage).remove();
				Wimp.renumberRoughPages();
			});
		},
		removeImage: function(image) {
			$(image).animate({width: 0}, function() {
				$(image).remove();
			});
		},
		removeRoughImage: function(roughImage) {
			roughImage = $(roughImage);
			var parent = $(roughImage).parent();
			roughImage.animate({width:0}, function() {
				roughImage.remove();
				Wimp.tileRoughInsideTiles(parent);
			});
		}
	};

	window.Wimp = Wimp;
	window.WimpShortcut = WimpShortcut;

})(window);

// Rough work area drop handling
(function(window) {
	var roughPageTarget = { target: null, direction: 0, dropFeedback: "" };

	var RoughPageImageDnd = {
		makeDraggable: function(el) {
			$(el).prop('draggable', true).on( {
				dragstart: function(ev) {
//					console.log("DragStore.start rough-page-image");
					ev = ev.originalEvent;
					ev.dataTransfer.setData('text/plain', this.src);// chrome does not work without this
					ev.dataTransfer.setData('text/uri-list', this.src);
					DragStore.start().roughImage = this;
					ev.dataTransfer.effectAllowed = 'move';
					ev.stopPropagation();
				},
				dragend: function(ev) {
//					console.log("DragStore.clear rough-page-image");
					DragStore.clear();
					ev.stopPropagation();
				}
			});
		}
	}
	var RoughWorkAreaDnd = {
		init: function() {
			$('#work-area-organize').prop('dropzone', true).on( {
				dragover: this.dragover,
				dragleave: this.dragleave,
				drop: this.drop,
				dragenter: this.dragenter
			});
			RoughWorkAreaDnd.makeDraggable($('.rough-page'));
		},
		makeDraggable: function(el) {	// makes rough-page draggable
			$(el).prop('draggable', true).on( {
				'dragstart': function(ev) {
					ev = ev.originalEvent;
					ev.dataTransfer.setData('text/plain', "my text");
//					console.log("DragStore.start rough-page");
					DragStore.start().roughPage = this;
					// TODO hide the page, create drag image from canvas
		//			ev.dataTransfer.setDragImage(clone, 0, 0);
					ev.dataTransfer.effectAllowed = "move";
				},
				'dragend': function(ev) {
//					console.log("DragStore.clear rough-page");
					DragStore.clear();
				}
			});
		},
		logTargets: function(prefix, ev) {
			var s = prefix;
			if (ev.target)
				s += ' target: ' + ev.target.id + ' ' + ev.target.className;
			else
				s += ' target: null';
			if (ev.currentTarget)
				s += ' current: ' + ev.currentTarget.id + ' ' + ev.currentTarget.className;
			else
				s += ' current: null';
			console.log(s);
		},
		dragenter: function(ev) {
			ev = ev.originalEvent;
			ev.stopPropagation();
			ev.preventDefault();
		},
		dragover: function(ev) {
			ev = ev.originalEvent;
			// Ignore unless drag has the right flavor
			if (!(DragStore.roughPage
				|| DragStore.image
				|| DragStore.addRoughPage
				|| DragStore.roughImage))
				return;
			ev.preventDefault();
			// Find the current drop location
			var newTarget = null;
			var newDirection = null;
			$(ev.currentTarget).children('.rough-page').each(function() {
				var direction = GUtil.pointInClientRect(ev.pageX, ev.pageY,
					this.getBoundingClientRect());
				if (direction) {
					newTarget = this;
					newDirection = direction;
					return false;
				}
			});
			// Display visual feedback
			if (DragStore.roughPage || DragStore.addRoughPage) {
				if (newTarget) {
					if (newTarget != DragStore.roughPage)
						RoughWorkAreaDnd.setTarget(newTarget, newDirection, 'drop-target');
				}
				else
					RoughWorkAreaDnd.setTarget();
			}
			else if (DragStore.image) {
				if (newTarget)
					RoughWorkAreaDnd.setTarget(newTarget, null, 'drop-target');
				else
					RoughWorkAreaDnd.setTarget();
			}
			else if (DragStore.roughImage) {
				if (newTarget && newTarget != $(DragStore.roughImage).parent('.rough-page').get(0))
					RoughWorkAreaDnd.setTarget(newTarget, null, 'drop-target');
				else
					RoughWorkAreaDnd.setTarget();
			}
		},
		dragleave: function(ev) {
			// This will cause a dragover with an empty target
			RoughWorkAreaDnd.dragover(ev);
		},
		drop: function(ev) {
			ev = ev.originalEvent;
			ev.preventDefault();
			if (!roughPageTarget.target)
				return;
			var t = {target: roughPageTarget.target, direction: roughPageTarget.direction};
			RoughWorkAreaDnd.setTarget();	// reset the drag visuals
			if (DragStore.roughPage) {
				t.target = $(t.target);
				var src = $(DragStore.roughPage);
				// patch the location if src is before destination
				// to preserve visual consistency
				if (src.parent().children().get().indexOf(src.get(0)) <
					t.target.parent().children().get().indexOf(t.target.get(0)))
					t.direction = 'after';

				var oldWidth = src.width();
				src.animate({width: 0}, function() { // hide old
					src.detach();
					if (t.direction == 'before')
						t.target.before(src);
					else
						t.target.after(src);
					src.animate({width: oldWidth}); // show new
					Wimp.renumberRoughPages();
				});
			}
			else if (DragStore.addRoughPage) {
				Wimp.addRoughPage(t.target, t.direction);
			}
			else if (DragStore.image) {
				var src = $(DragStore.image);
				var newImg = $("<div class='rough-tile'/>");
				newImg.css('background-image', 'url("' + src.prop('src') + '")');
				newImg.appendTo(t.target);
				RoughPageImageDnd.makeDraggable(newImg);
				Wimp.tileRoughInsideTiles(t.target);
			}
			else if (DragStore.roughImage) {
				// move image from one rough to another
				var oldParent = $(DragStore.roughImage).parent();
				$(DragStore.roughImage).detach();
				Wimp.tileRoughInsideTiles(oldParent);
				$(t.target).append(DragStore.roughImage);
				Wimp.tileRoughInsideTiles(t.target);
			}
		},
		setTarget:	function (target, direction, dropFeedback) {
			direction = 'before';	// decided to ignore direction for now
			if (roughPageTarget.target == target && roughPageTarget.direction == direction)
				return;
			if (roughPageTarget.target) {
				$(roughPageTarget.target).removeClass(roughPageTarget.dropFeedback);
			}
			roughPageTarget = { target: target, direction: direction, dropFeedback: dropFeedback }
			if (target)
				$(target).addClass(dropFeedback);
		}
	}
	if (!('Dnd' in window))
		window.Dnd = {};
	window.Dnd.RoughWorkArea = RoughWorkAreaDnd;
	window.Dnd.RoughPageImage = RoughPageImageDnd;

})(window);


// Utilities
(function(window) {
	var GUtil = {
		// false not in rect, 'left' to the left, 'right' to the right
		pointInClientRect: function(x, y, r) {
			var inRect = y >= r.top && y <= r.bottom && x >= r.left && x <= r.right;
			if (inRect) {
				var midpoint = r.left + (r.right - r.left) / 10;
//				console.log(x, ' mid ', midpoint,  x < midpoint ? 'before' : 'after');
				return x < midpoint ? 'before' : 'after';
			}
			else
				return false;
		}
	}
	window.GUtil = GUtil;
})(window);

// DragStore is a global used to store dragged local data
// Why? Html drag can only drag strings, we need js objects
// Drag types are not available dragover callback
(function(window) {
	var DragStore = {
		start: function() {
//			console.log("DragStore.start");
			this._roughPage = null;
			this._image = null;
			this._roughImage = null;
			this._addRoughPage = null;
			return this;
		},
		clear: function() {
			this.start();
		},
		get roughPage() {return this._roughPage},
		set roughPage(val) { this._roughPage = val;},
		get image() { return this._image},
		set image(val) { this._image = val;},
		get addRoughPage() { return this._addRoughPage},
		set addRoughPage(val) { this._addRoughPage = val },
		get roughImage() { return this._roughImage },
		set roughImage(val) { this._roughImage = val}
	}
	window.DragStore = DragStore;
})(window);

insertImages();
makeDraggable();
Dnd.RoughWorkArea.init();
$('#add-page-btn').prop('draggable', true).on({
	click: function(ev) {
		Wimp.addRoughPage();
	},
	dragstart: function(ev) {
		ev = ev.originalEvent;
		ev.dataTransfer.setData('text/plain', "my text");
		DragStore.start().addRoughPage = true;
		ev.dataTransfer.effectAllowed = "move";
	},
	dragend: function(ev) {
		DragStore.clear();
	}
});
$('#remove-page-btn').prop('dropzone', true).on( {
	dragover: function(ev) {
		ev = ev.originalEvent;
		ev.preventDefault();
		if (!(DragStore.roughPage
				|| DragStore.image
				|| DragStore.roughImage))
			return;
		$(this).addClass('drop-target');
		ev.stopPropagation();
	},
	dragleave: function(ev) {
		$(this).removeClass('drop-target');
	},
	drop: function(ev) {
		ev.preventDefault();
		ev.stopPropagation();
		$(this).removeClass('drop-target');
		if (DragStore.roughPage)
			Wimp.removeRoughPage(DragStore.roughPage);
		else if (DragStore.image)
			Wimp.removeImage(DragStore.image);
		else if (DragStore.roughImage)
			Wimp.removeRoughImage(DragStore.roughImage);
	}
});
WimpShortcut.add(new WimpShortcut('viewMoreImages', '+', false,
	function() {Wimp.viewMoreImages()}));
WimpShortcut.add(new WimpShortcut('viewMoreImages', '=', false,
	function() {Wimp.viewMoreImages()}));
WimpShortcut.add(new WimpShortcut('viewFewerImages', '-', false,
	function() {Wimp.viewFewerImages()}));
WimpShortcut.add(new WimpShortcut('viewBiggerImages', '+', true,
	function() {Wimp.viewBiggerImages()}));
WimpShortcut.add(new WimpShortcut('viewBiggerImages', '=', true,
	function() {Wimp.viewBiggerImages()}));
WimpShortcut.add(new WimpShortcut('viewSmallerImages', '-', true,
	function() {Wimp.viewSmallerImages()}));
WimpShortcut.add(new WimpShortcut('addRoughPage', 'p', false,
	function() {Wimp.addRoughPage()}))

</script>
</body>
