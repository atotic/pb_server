#!/usr/bin/env ruby

require 'bundler/setup'

require_relative '../config/settings'
require_relative '../lib/sveg/utils'

def usage
	puts "invalid option #{ARGV[0]}"
	$stdout.puts "main script, controls all servers"
	$stdout.puts "usage: #{__FILE__} start|stop|status"
	exit
end

def status_one(process_name)
	pid_file = File.join(SvegSettings.tmp_dir, process_name + ".pid")
	if File.exists?(pid_file) then
		pid = File.read(pid_file).to_s.chomp
		status = `ps -A -o "pid,comm,time,user" | grep '^ *#{pid}'`[0..60]
		if (status.empty?) then
			`rm #{pid_file}`
			status = "process not found. pid file removed"
		end
		puts "#{process_name.ljust(16)}: " + status
	else
		puts "#{process_name.ljust(16)}: DOWN"
	end
end

def status
	status_one "sveg"
	status_one "delayed_job"
	status_one "pdf_saver_server"
	status_one "comet"
	pid = PB::CommandLine.get_chromium_pid
	if pid then 
		puts "#{"chromium".ljust(16)}: " + `ps -A | grep '^ *#{pid}'`[1..60]
	else
		puts "chromium".ljust(16) + ": DOWN"
	end
end

def start
	puts `script/comet start`
	puts `script/delayed_job start`
	puts `script/pdf_saver_server start`
	puts `script/chrome start`
	puts `script/sveg start`
end

def stop
	puts `script/comet stop`
	puts `script/delayed_job stop`
	puts `script/pdf_saver_server stop`
	puts `script/chrome stop`
	puts `script/sveg stop`
end

usage unless ARGV.length >= 1 && ARGV[0].match(/start|stop|status|restart/)

case
when ARGV[0].eql?("status") then status
when ARGV[0].eql?("start") then start
when ARGV[0].eql?("stop") then stop
when ARGV[0].eql?("restart") then stop;start
else usage
end
